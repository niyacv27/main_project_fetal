# -*- coding: utf-8 -*-
"""Niya_life

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/189cXmncq9jma1SjHMSiGSqmRX0bV9q0s
"""

about.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>About Us - FetoHealth</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <style>
        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background: #fffefefe;
            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }

        .about-us {
           display: flex;
           justify-content: center;
           align-items: center;
           padding: 60px 10%;
           background-color: #F7F7FF; /* Soft background */
        }

        .about-container {
           display: flex;
           align-items: center;
           max-width: 1200px;
           width: 100%;
        }

        .about-text {
           flex: 1;
           padding-right: 40px;
        }

        .about-text h1 {
           color: #0D0D5C; /* Dark Blue */
           font-size: 2.5rem;

           font-weight: bold;
        }

       .about-text p {
          font-size: 1.2rem;
          color: #333;
          line-height: 1.6;
        }

        .about-image {
           flex: 1;
           text-align: right;
        }

        .about-image img {
           max-width: 100%;
           height: auto;
           border-radius: 10px;
           box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
        }

        .about-text {
           max-width: 600px;  /* Adjust width for better line balance */
           text-align: justify;  /* Justifies text for even spacing */
           line-height: 1.6;  /* Improves readability */
           margin: auto;  /* Centers the text block */
        }
        .about-text h1{
           max-width: 600px;  /* Adjust width for better line balance */
           text-align: center;  /* Justifies text for even spacing */
           line-height: 1.6;  /* Improves readability */
           margin: auto;  /* Centers the text block */
        }


        .our-features {
           text-align: center;
           padding: 50px 0;
           background-color: #F7F7FF; /* Soft background */
        }

        .our-features h1 {
           font-size: 28px;
           color: #000099;
           margin-bottom: 30px;
        }

        /* Feature Boxes */
        .features-container {
            display: flex;
            justify-content: center;
            gap: 20px;
            max-width: 1200px;
            margin: 0 auto;

        }

        .feature-box {
           width: 70%;

           background-color: #e0e0ea;
           padding: 50px;
           border-radius: 8px;
           text-align: center;
           box-shadow: 2px 2px 10px rgba(163, 146, 146, 0.1);
           opacity: 0;
           transform: translateY(20px);
           animation: fadeInUp 1s ease-in-out forwards;
        }

        .feature-box h2 {
           font-size: 24px;
           color: #c4507c;
           margin-bottom: 10px;
        }

        .feature-box p {
           font-size: 18px;
           color: #222121;

        }

        /* Animation */
        @keyframes fadeInUp {
           from {
              opacity: 0;
              transform: translateY(20px);
           }
           to {
             opacity: 1;
             transform: translateY(0);
            }
        }

    </style>
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">Feto</span><span class="health">Health</span>
        </div>
        <div class="header-center">

            <a href="{{ url_for('home') }}">Home</a>
            <a href="{{ url_for('admin_login') }}">Admin</a>

        </div>
        <div class="header-right">

            <a href="{{ url_for('login') }}">Login</a>
            <a href="{{ url_for('register') }}">Sign up</a>

        </div>
    </nav>

    <!-- About Us Section -->
    <section class="about-us">
       <div class="about-container">
          <div class="about-text">
              <h1>About FetoHealth</h1>
              <p>FetoHealth is an platform designed to enhance maternal and fetal health through advanced monitoring and predictive analytics.
              Our technology provides expecting mothers and healthcare professionals with critical insights to ensure a safe and healthy pregnancy.
              With FetoHealth, we bridge the gap between technology and maternal care, offering a smarter, data-driven approach to prenatal health management.
              Whether you're an expecting mother or a medical professional, our platform ensures informed decision-making and early intervention for the best possible outcomes.</p>

            </div>
            <div class="about-image">
               <img src="{{ url_for('static', filename='images/img 60.png') }}" alt="FetoHealth Illustration">
            </div>
        </div>
    </section>


    <section class="our-features">
       <h1>Our Features</h1>
         <div class="features-container">
            <div class="feature-box" style="animation-delay: 0.2s;">
               <h2>Accurate Fetal Health Prediction</h2>
               <p>Using AI and machine learning, FetoHealth delivers precise predictions by analyzing medical data.</p>
            </div>
            <div class="feature-box" style="animation-delay: 0.4s;">
               <h2>Comprehensive Healthcare Management</h2>
               <p>We streamline patient, doctor, and lab assistant interactions for smooth data handling.</p>
            </div>
            <div class="feature-box" style="animation-delay: 0.6s;">
               <h2>Data Security and Integrity</h2>
               <p>FetoHealth prioritizes data privacy, ensuring that patient information is handled securely.</p>
            </div>
            <div class="feature-box" style="animation-delay: 0.8s;">
                <h2>Detailed Report Generation</h2>
                <p>Our platform provides in-depth health reports that can be downloaded in PDF format.</p>
            </div>
        </div>
    </section>

</body>
</html>

admin_dashboard.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>

        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F7F7FF; /* Soft background */

            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }
        .logout-btn {
            color: #000099 !important; /* Blue color */
            text-decoration: none;
            font-weight: bold;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
        }

        .logout-btn:hover {
            background: #f0f0f0; /* Light gray background on hover */
        }
        .header-center p {
           font-size: 25px; /* Adjust the text size */
           text-align: center;
           font-weight: bold; /* Make the text bold */
           color: #000099; /* Change text color to dark blue */
           text-transform: uppercase; /* Convert text to uppercase */
           letter-spacing: 1px; /* Add spacing between letters */
           margin: 0; /* Remove default margin */
           padding: 10px 20px; /* Add padding */

           border-radius: 8px; /* Rounded corners */

        }


    </style>
    <script>
        function fetchUsers(role) {
            fetch(`/fetch_users/${role}`)
                .then(response => response.json())
                .then(data => {
                    data.sort((a, b) => {
                        const statusOrder = { "pending": 0, "approved": 1, "rejected": 2 };
                        return statusOrder[a.status] - statusOrder[b.status];
                    });

                    let userTable = `
                        <h3 class="text-center mt-3">${role.replace('_', ' ')} Approvals</h3>
                        <table class="table table-bordered table-hover mt-3">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Username</th>
                                    <th>Email</th>
                                    <th>Password</th>
                                    <th>Status</th>
                                    <th>Date</th>
                                    <th>Time</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>`;

                    data.forEach(user => {
                        userTable += `
                            <tr id="user_${user._id}">
                                <td>${user.user_id ? user.user_id : "N/A"}</td>
                                <td>${user.username}</td>
                                <td>${user.email}</td>
                                <td>${user.password}</td>
                                <td id="status_${user._id}" class="fw-bold text-${user.status === 'approved' ? 'success' : user.status === 'rejected' ? 'danger' : 'warning'}">${user.status}</td>
                                <td id="date_${user._id}">${user.updated_date !== "N/A" ? user.updated_date : "N/A"}</td>
                                <td id="time_${user._id}">${user.updated_time !== "N/A" ? user.updated_time : "N/A"}</td>
                                <td>
                                    ${user.status === "pending" ? `
                                        <button class="btn btn-success btn-sm me-1" onclick="updateStatus('${user._id}', 'approved')">Approve</button>
                                        <button class="btn btn-danger btn-sm" onclick="updateStatus('${user._id}', 'rejected')">Reject</button>
                                    ` : ""}
                                    ${user.status === "approved" || user.status === "rejected" ? `
                                        <button class="btn btn-outline-danger btn-sm" onclick="deleteUser('${user._id}', '${user.status}')">Delete</button>
                                    ` : ""}
                                </td>
                            </tr>`;
                    });

                    userTable += `</tbody></table>`;
                    document.getElementById("userList").innerHTML = userTable;
                });
        }

        function updateStatus(userId, status) {
            fetch('/update_status', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId: userId, status: status })
            })
            .then(response => response.json())
            .then(data => {
                if (data.message.includes("successfully")) {
                    document.getElementById(`status_${userId}`).innerText = status;
                    document.getElementById(`status_${userId}`).className = `fw-bold text-${status === 'approved' ? 'success' : 'danger'}`;

                    if (data.updated_at && data.updated_at !== "N/A") {
                        let [date, time] = data.updated_at.split(" ");
                        document.getElementById(`date_${userId}`).innerText = date || "N/A";
                        document.getElementById(`time_${userId}`).innerText = time || "N/A";
                    }

                    let actionCell = document.getElementById(`user_${userId}`).querySelector("td:last-child");
                    actionCell.innerHTML = `<button class="btn btn-outline-danger btn-sm" onclick="deleteUser('${userId}', '${status}')">Delete</button>`;
                }
            })
            .catch(error => console.error("Error:", error));
        }

        function deleteUser(userId, status) {
            if (status === "rejected") {
                fetch('/delete_user', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ userId: userId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.message.includes("deleted")) {
                        document.getElementById(`user_${userId}`).remove();
                    }
                })
                .catch(error => console.error("Error:", error));
            } else {
                document.getElementById(`user_${userId}`).remove();
            }
        }
    </script>
</head>
<body class="bg-light">

    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">Feto</span><span class="health">Health</span>
        </div>
        <div class="header-center">

            <p> Welcome to Admin Dashboard</p>

        </div>
        <div class="header-right">

            <a href="{{ url_for('home') }}" class="logout-btn">Logout</a>



        </div>
    </nav>

    <div class="container mt-4">


        <div class="text-center mt-3">
            <button class="btn btn-primary me-2" onclick="fetchUsers('lab_assistant')">View Lab Assistants</button>
            <button class="btn btn-info" onclick="fetchUsers('doctor')">View Doctors</button>
        </div>

        <div id="userList" class="mt-4"></div>


    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

admin_login.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Login</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>

        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F7F7FF; /* Soft background */

            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }



        .login-container {
            width: 100%;
            max-width: 400px;
            margin: 50px auto;
            padding: 30px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .form-control {
            margin-bottom: 15px;
        }
        .btn-primary {
            width: 100%;
        }
        .flash-messages {
            list-style-type: none;
            padding: 0;
        }
        .flash-messages li {
            background: #ebe8e8;
            color: red;
            padding: 8px;
            margin-top: 5px;
            border-radius: 5px;
        }


        .logout-btn {
            color: #000099 !important; /* Blue color */
            text-decoration: none;
            font-weight: bold;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
        }

        .logout-btn:hover {
            background: #f0f0f0; /* Light gray background on hover */
        }

    </style>
</head>
<body>



    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">Feto</span><span class="health">Health</span>
        </div>
        <div class="header-center">

            <a href="{{ url_for('home') }}">Home</a>
            <a href="{{ url_for('about') }}">About </a>


        </div>
        <div class="header-right">

            <a href="{{ url_for('home') }}" class="logout-btn">Logout</a>



        </div>
    </nav>

    <div class="login-container">
        <h2 class="text-center"> Admin Login</h2>
        <form action="{{ url_for('admin_login') }}" method="POST">
            <div class="mb-3">

                <input type="email" name="email" class="form-control" placeholder="Email" required>

            </div>
            <div class="mb-3">
                <input type="password" name="password" class="form-control" placeholder="Password" required>
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </form>

        {% with messages = get_flashed_messages() %}
            {% if messages %}
                <ul class="flash-messages">
                    {% for message in messages %}
                        <li>{{ message }}</li>
                    {% endfor %}
                </ul>
            {% endif %}
        {% endwith %}
    </div>



    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>



</body>
</html>

doctor_dashboard.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Doctor Dashboard</title>
    <style>

        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F7F7FF;

            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }
        .header-center p {
           font-size: 25px; /* Adjust the text size */
           text-align: center;
           font-weight: bold; /* Make the text bold */
           color: #000099; /* Change text color to dark blue */
           text-transform: uppercase; /* Convert text to uppercase */
           letter-spacing: 1px; /* Add spacing between letters */
           margin: 0; /* Remove default margin */
           padding: 10px 20px; /* Add padding */

           border-radius: 8px; /* Rounded corners */

        }




        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
            width: 90%;
            margin: 60px auto;

        }

        h1 {
           color: #333;
        }

        /* Move Sorting Outside Table */
        .sort-container {
            margin-top: 20px;
            margin-bottom: 5px;
            text-align: left;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 8px;
            width: fit-content;
        }

        /* Table Styles */
        table {
           width: 100%;
           background: #fff;
           border-collapse: collapse;
           border: 2px solid black; /* Ensuring columns are separated */
        }

        /* Table Headers */
        .table-header {

           background-color: #5d5a5d;

           color: white;
           font-weight: bold;
        }

        /* Table Cells */
        th, td {
           text-align: center;
           padding: 12px;
           border: 1px solid black; /* Black column separation */
        }



        /* Buttons */
        .btn {
           padding: 6px 12px;
           border-radius: 5px;
           font-size: 14px;
           text-decoration: none;
        }
        .btn-info {
           background-color: #388c99;
           color: white;
        }
        .btn-warning {
           background-color: #f63962;
           color: white;
        }
        .btn-danger {
           background-color: #e3150e;
           color: white;
        }

        /* Status Colors */
        .status {
           font-weight: bold;
           padding: 8px;
           border-radius: 5px;
           text-align: center;
           background: none;
        }
        .status-pending {
           color: #f4b109; /* Yellow */

        }
        .status-predicted {
            color: #28a745; /* Green */
        }

    </style>
    <script>
        function updateSort() {
            const sortValue = document.getElementById("sortDropdown").value;
            window.location.href = "{{ url_for('doctor_dashboard') }}?sort=" + sortValue;
        }
    </script>
</head>
<body>


<!-- Navigation Bar -->
<nav class="header">
    <div class="header-left">
        <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
        <span class="feto">Feto</span><span class="health">Health</span>
    </div>
    <div class="header-center">

        <p>  Doctor Dashboard</p>

    </div>
    <div class="header-right">


        <a href="{{ url_for('home') }}" class="logout-btn">Logout</a>


    </div>
</nav>


<div class="container mt-4">
 <div class="sort-container">
    <label for="sortDropdown">Sort By:</label>
    <select id="sortDropdown" class="form-select w-auto" onchange="updateSort()">
        <option value="new_to_old" {% if selected_sort == 'new_to_old' %}selected{% endif %}>New to Old</option>
        <option value="old_to_new" {% if selected_sort == 'old_to_new' %}selected{% endif %}>Old to New</option>
        <option value="pending" {% if selected_sort == 'pending' %}selected{% endif %}>Pending</option>
        <option value="predicted" {% if selected_sort == 'predicted' %}selected{% endif %}>Predicted</option>
    </select>
</div>

<!-- Table Container -->

    <table class="table">
        <thead>
            <tr class="table-header"> <!-- Added class to change color -->
                <th>Patient Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Lab Assistant</th>
                <th>Values</th>
                <th>Date</th>
                <th>Time</th>
                <th>Status</th>
                <th>Prediction</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            {% for report in reports %}
            {% if not report.deleted_by_doctor %}
            <tr>
                <td>{{ report.patient_username }}</td>
                <td>{{ report.patient_email }}</td>
                <td>{{ report.patient_phone }}</td>
                <td>{{ report.lab_assistant_username }}</td>
                <td>
                    <a href="{{ url_for('view_values', report_id=report._id) }}" class="btn btn-info btn-sm">View Values</a>
                </td>
                <td>{{ report.date }}</td>
                <td>{{ report.time }}</td>

                <!-- Status Column with Colors -->
                <td class="status
                    {% if report.status == 'Pending' %} status-pending
                    {% elif report.status == 'Predicted' %} status-predicted {% endif %}">
                    {{ report.status }}
                </td>

                <!-- Predict Column -->
                <td>

                    <form action="{{ url_for('predict', report_id=report._id) }}" method="POST">
                        <button type="submit" class="btn btn-warning btn-sm">Predict</button>
                    </form>

                </td>

                <!-- Delete Column -->
                <td>
                    <form action="{{ url_for('delete_report_doctor', report_id=report._id) }}" method="POST">
                        <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                    </form>
                </td>
            </tr>
            {% endif %}
            {% endfor %}
        </tbody>
    </table>
</div>


</body>
</html>

enter_values.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enter Values</title>
    <style>
        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F7F7FF;

            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }
        .header-center p {
           font-size: 25px; /* Adjust the text size */
           text-align: center;
           font-weight: bold; /* Make the text bold */
           color: #000099; /* Change text color to dark blue */
           text-transform: uppercase; /* Convert text to uppercase */
           letter-spacing: 1px; /* Add spacing between letters */
           margin: 0; /* Remove default margin */
           padding: 10px 20px; /* Add padding */

           border-radius: 8px; /* Rounded corners */

        }
        .form-container {
           max-width: 600px;
           margin: 50px auto;
           background: white;
           padding: 30px;
           border-radius: 10px;
           box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        }

        h1 {
           text-align: center;
           color: #6617b5;
           font-weight: bold;
           margin-bottom: 20px;
        }

        /* Table-like structure */
        .form-group {
           display: flex;
           align-items: center;
           margin-bottom: 10px;
        }

        .form-group label {
            flex: 1;
            font-weight: bold;
            text-align: right;
            padding-right: 25px;
        }

        .form-group input {
            flex: 2;
            width: 50%;
            padding: 17px;
            border: 1px solid #ddd;
            border-radius: 5px;
            text-align: center;
        }

        .form-group input:focus {
            border-color: #6617b5;
            box-shadow: 0px 0px 5px rgba(102, 23, 181, 0.5);
            outline: none;
        }

        .btn-submit {
            width: 100%;
            padding: 12px;
            background: #6617b5;
            color: white;
            font-weight: bold;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: 0.3s;
        }

        .btn-submit:hover {
            background: #530d98;
        }

    </style>
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">Feto</span><span class="health">Health</span>
        </div>
        <div class="header-center">

            <p>  Test Values </p>

        </div>
        <div class="header-right">

            <a href="{{ url_for('lab_assistant_dashboard') }}">Go Back</a>



        </div>
    </nav>


    <div class="form-container">
        <h1>Enter Test Values for {{ patient.patient_username }}</h1>
        <form method="POST">
            {% for field in [
                'baseline_value', 'accelerations', 'fetal_movement', 'uterine_contractions',
                'light_decelerations', 'severe_decelerations', 'prolongued_decelerations',
                'abnormal_short_term_variability', 'mean_value_of_short_term_variability',
                'percentage_of_time_with_abnormal_long_term_variability', 'mean_value_of_long_term_variability',
                'histogram_width', 'histogram_min', 'histogram_max', 'histogram_number_of_peaks',
                'histogram_number_of_zeroes', 'histogram_mode', 'histogram_mean', 'histogram_median',
                'histogram_variance', 'histogram_tendency'
            ] %}
            <div class="form-group">
                <label for="{{ field }}">{{ field.replace('_', ' ').title() }}</label>
                <input type="text" name="{{ field }}" required>
            </div>
            {% endfor %}
            <button type="submit" class="btn-submit">Ask to Doctor</button>
        </form>
    </div>


</body>
</html>

error.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Error</title>
</head>
<body>
    <h2>An error occurred</h2>
    <p>{{ error_message }}</p>
    <a href="/">Go Back</a>
</body>
</html>

home.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home - Fetal Status Prediction System</title>
    <style>
        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background: #fffefefe;
            color: #333;
            text-align: center;
        }

        /* Section Styling */
        section {
            padding: 50px;
            border-bottom: 1px solid #ddd;
            position: relative;
        }

        /* Header Section */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 20px;
            background: #fffefefe;

            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 1px;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
        }


        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           letter-spacing: 0; /* Ensures no extra space */
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple color for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Orange color for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;
        }
        .header-left {
           word-spacing: -0.5px; /* Adjust if needed */
        }

        .header-center,
        .header-right {
            display: flex;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;

            color: #000099;
            padding: 10px 20px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }
            /* Image Slider */
        .image-slider {
            position: relative;
            height: 400px;
            overflow: hidden;
        }

        .image-slider img {
           width: 100%;
           height: 150%;
           object-fit: cover;
           position: absolute;
           top: 0;
           left: 0;
           opacity: 0;
           transition: opacity 1s ease-in-out;
        }

        .image-slider img.active {
           opacity: 1;
        }

        /* Overlay Text - Left Alignment */
        .overlay-text {
           position: absolute;
           top: 30%;
           left: 2%; /* Moves text to the left side */
           transform: translateY(-50%); /* Only adjust vertically */

           color: #0D0D5C;
           text-align: left;
           padding: 20px 40px;
        }

        .overlay-text h1 {
           font-size: 2.5rem;
           margin-bottom: 10px;
           font-weight: bold;
           font-style: italic;
           color: #0D0D5C;

        }

        .overlay-text p {
            font-size: 1.2rem;

            font-style: oblique;
            color: #6565cc;

        }
        .get-started-btn {
            display: inline-block;
            margin-top: 10px;
            padding: 10px 20px;
            font-size: 1.2rem;
            color: white;
            background: rgb(122, 103, 201);
            border: none;
            border-radius: 7px;
            text-decoration: none;
            font-weight: bold;
            transition: 0.3s ease-in-out;
        }

        .get-started-btn:hover {
            background: rgb(124, 170, 207);
        }

        /* Partitioned Box */
        .partitioned-box {
            position: relative;
            margin: -100px auto 0;
            background: rgba(255, 255, 255, 0.9);
            padding: 2px;
            border-radius: 10px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            width: 50%;
            max-width: 1100px;
            display: flex;
            gap: 0;
            z-index: 10;
            transition: transform 0.5s ease, box-shadow 0.5s ease;
        }

        .partitioned-box:hover {
            transform: translateY(-20px);
            box-shadow: 0px 12px 18px rgba(0, 0, 0, 0.3);
        }

        .partition {
            flex: 1;
            text-align: center;
            padding: 10px;
            position: relative;
        }

        .partition:not(:last-child)::after {
            content: '';
            position: absolute;
            top: 10px;
            right: 0;
            height: calc(100% - 5px);
            width: 1px;
            background: #000;
        }

        .partition h3 {
            font-size: 1.2rem;
            color: #007BFF;
            margin-bottom: 10px;
        }

        .partition p {
            font-size: 1.4rem;
            color: #080808;


        }

        .partition img {
            width: 80px;
            height: 80px;
            display: block;
            margin: 0 auto 10px;
        }



        .why-fetohealth {
            text-align: center;
            font-size: 25px;
            padding: 40px;
        }
        .why-fetohealth h1 {
            text-align: center;

            color: #000099;
            padding: 10px;
        }
        .why-fetohealth p {
            text-align: justify; /* Aligns text evenly for a clean look */
            font-size: 20px;
            font-style: normal;
            font-weight: 400; /* Adds slight thickness for readability */
            color: #080808; /* Slightly darker shade for contrast */
            line-height: 2; /* Improves readability with better spacing */
            padding: 20px; /* Adds more padding for better separation */
            max-width: 1300px; /* Restricts width for better readability */
            margin: 0 auto; /* Centers the paragraph */
            background: rgba(255, 255, 255, 0.8); /* Adds a subtle background effect */
            border-radius: 10px; /* Rounds the edges for a smooth look */
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1); /* Light shadow for a floating effect */
        }


        .features-container {
            display: grid;
            grid-template-columns: repeat(2, 1fr); /* Creates two equal columns */
            gap: 20px; /* Adds space between boxes */
            margin-top: 20px;
            justify-items: center;
            width: 100%;

        }

        .feature-box {
            width: 85%;

            background-color: #f4f4f4;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 2px 2px 10px rgba(163, 146, 146, 0.1);
            opacity: 0;
            transform: translateY(20px);
            animation: fadeInUp 1s ease-in-out forwards;

        }

        .feature-box h2 {
            font-size: 22px;
            font-style: normal;
            color: #ef5690;
            margin-bottom: 10px;
        }

        .feature-box p {
            font-size: 20px;
            font-style: normal;
            color: #222121;
            font-size: 17px;
        }

        /* Animation */
        @keyframes fadeInUp {
           from {
              opacity: 0;
              transform: translateY(20px);
            }
            to {
              opacity: 1;
              transform: translateY(0);
            }
        }

        .what-we-do {
            text-align: center;
            padding: 50px;
            background: white;
            color: #000099;
            font-size: 20px;

        }
        .slider-container {
            position: relative;
            width: 100%;
            max-width: 100%;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .slider-wrapper {
            width: 70%;
            overflow: hidden;
        }

        .slider {
            display: flex;
            transition: transform 1.8s ease-in-out;
            width: 100%; /* Ensures all slides fit horizontally */
        }

        .slide {
            width: 100%;
            flex: 0 0 100%;
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .slide img {
            max-width: 20%;
            height: auto;
            object-fit: contain;
        }

        .prev, .next {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            border: none;
            padding: 10px 15px;
            cursor: pointer;
            font-size: 24px;
        }

        .prev {
            left: 10px;
        }

        .next {
            right: 10px;
        }

        .logo-1 {
           width: 3000px;
           height: 3000px;

        }


        .logo-2 {
            width: 3000px;
            height: 3000px;
        }

        .logo-3 {
            width: 150px;
            height: 250px;
        }

        .logo-4 {
           width: 3000px;
           height: 3000px;
        }

        .logo-5 {
           width: 300px;
           height: 300px;

        }

        .slide p {
           font-size: 24px; /* Adjust the size as needed */
           font-weight: bold; /* Makes the text more readable */
           color: #c13b6e;

           text-align: center; /* Ensures the text is centered under the image */
           margin-top: 10px; /* Adds spacing between the image and text */
        }



    </style>
</head>
<body>

    <section class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">Feto</span><span class="health">Health</span>

        </div>
        <div class="header-center">
            <a href="{{ url_for('home') }}">Home</a>
            <a href="{{ url_for('about') }}">About </a>
            <a href="{{ url_for('admin_login') }}">Admin</a>
        </div>
        <div class="header-right">
            <a href="{{ url_for('login') }}">Login</a>
            <a href="{{ url_for('register') }}">Sign up</a>
        </div>
    </section>



    <section class="image-slider">
        <img src="{{ url_for('static', filename='images/img101.png') }}" alt="Banner" class="active">
        <div class="overlay-text">
            <h1>Welcome to FetoHealth</h1>
            <p>Your Trusted Partner in Fetal Health Prediction</p>
            <a href="{{ url_for('register') }}" class="get-started-btn">Get Started</a>
        </div>
    </section>



    <div class="partitioned-box">
        <div class="partition">
            <img src="{{ url_for('static', filename='images/logo 10.png') }}" alt="Logo">
            <p>SHAP Health Insights</p>
        </div>
        <div class="partition">
            <img src="{{ url_for('static', filename='images/logo 12.png') }}" alt="Logo">
            <p>Secure Data Handling</p>
        </div>
        <div class="partition">
            <img src="{{ url_for('static', filename='images/logo 13.png') }}" alt="Logo">
            <p> Reports with Remarks</p>
        </div>
    </div>
    <section class="why-fetohealth">
        <h1>Why FetoHealth</h1>

        <p>FetoHealth is an AI-driven platform designed to ensure the well-being of the fetus. By integrating cutting-edge technology with healthcare, we provide reliable insights and real-time monitoring for fetal health assessment. Our advanced algorithms analyze vital health parameters, offering early warnings about potential risks and complications. This proactive approach allows healthcare professionals to take timely action, ensuring better maternal and fetal outcomes..</p>
                   <p>Our system supports medical professionals with data-driven predictions, helping them detect potential complications at an early stage. With a focus on accuracy, security, and accessibility, FetoHealth enhances maternal care through seamless digital solutions. By leveraging AI-powered diagnostics, we enable continuous remote monitoring, reducing the need for frequent hospital visits while still ensuring comprehensive care. Furthermore, our platform fosters better patient-doctor communication, empowering expectant mothers with personalized health insights and fostering a sense of confidence and reassurance throughout pregnancy..</p>

        <div class="features-container">
            <div class="feature-box" style="animation-delay: 2s;">
                <h2>Accurate Fetal Health Prediction</h2>
                <p>Using AI and machine learning, FetoHealth delivers precise predictions by analyzing medical data, assisting doctors in early diagnosis and preventive care.</p>
            </div>
            <div class="feature-box" style="animation-delay: 2.5s;">
                <h2>Comprehensive Healthcare Management</h2>
                <p>We streamline patient, doctor, and lab assistant interactions, ensuring smooth data handling and efficient management within the healthcare ecosystem.</p>
            </div>
            <div class="feature-box" style="animation-delay: 3s;">
                <h2>Data Security and Integrity</h2>
                <p>FetoHealth prioritizes data privacy,ensuring that patient information is handled securely and confidentially.</p>
            </div>
            <div class="feature-box" style="animation-delay: 3.5s;">
                <h2>Detailed Report Generation</h2>
                <p>Our platform provides in-depth health reports that can be downloaded in PDF format, allowing patients easy access to critical information.</p>
            </div>
        </div>
    </section>


    <section class="what-we-do">
        <h1>What We Do</h1>
        <div class="slider-container">
            <button class="prev" onclick="moveSlide(-1)">&#10094;</button>
            <div class="slider-wrapper">
                <div class="slider">
                    <div class="slide">

                        <img class="logo-1" src="{{ url_for('static', filename='images/logo 20.png') }}" alt="Logo 1">

                        <p>Patient Authentication</p>
                    </div>
                    <div class="slide">
                        <img class="logo-2" src="{{ url_for('static', filename='images/logo 21.png') }}" alt="Logo 1">

                        <p>Admin-Approved Access</p>
                    </div>
                    <div class="slide">
                        <img class="logo-3" src="{{ url_for('static', filename='images/logo 22.png') }}" alt="Logo 1">

                        <p>Lab Assistant Data Entry</p>
                    </div>
                    <div class="slide">
                        <img class="logo-4" src="{{ url_for('static', filename='images/logo 23.png') }}" alt="Logo 1">

                        <p>Doctor's Diagnosis</p>
                    </div>
                    <div class="slide">
                        <img class="logo-5" src="{{ url_for('static', filename='images/logo 24.png') }}" alt="Logo 1">

                        <p>Report Download</p>
                    </div>
                </div>
            </div>
            <button class="next" onclick="moveSlide(1)">&#10095;</button>
        </div>
    </section>
    <script>
        let currentIndex = 0;

        function moveSlide(direction) {
            const slides = document.querySelector(".slider");
            const totalSlides = document.querySelectorAll(".slide").length;

            currentIndex += direction;
            if (currentIndex < 0) {
                currentIndex = totalSlides - 1;
            } else if (currentIndex >= totalSlides) {
                currentIndex = 0;
            }

            slides.style.transform = `translateX(-${currentIndex * 100}%)`;
        }
    </script>

</body>
</html>

lab_assistant_dashboard.html

<!DOCTYPE html>
<html lang="en">
<head>
    <style>

        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F7F7FF;

            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }
        .header-center p {
           font-size: 25px; /* Adjust the text size */
           text-align: center;
           font-weight: bold; /* Make the text bold */
           color: #000099; /* Change text color to dark blue */
           text-transform: uppercase; /* Convert text to uppercase */
           letter-spacing: 1px; /* Add spacing between letters */
           margin: 0; /* Remove default margin */
           padding: 10px 20px; /* Add padding */

           border-radius: 8px; /* Rounded corners */

        }

        .container {
            max-width: 90%;
            margin: 60px auto;

            background: #fff;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        }



        /* Dropdown styling */
        select {
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ddd;
            cursor: pointer;
        }

        table {
            width: 100%;
            background: #fff;
            border-collapse: collapse;
        }

        th, td {
            text-align: center;
            padding: 12px;
            border-bottom: 1px solid #e6e0e0;
            border: 1px solid black;

        }

        th {
            background: #5d5a5d;
            color: white;
        }

        tbody tr:hover {
            background: #f1f1f1;
        }

        .hidden {
            display: none;
        }

        .custom-btn {
            text-decoration: none;  /* Removes underline */
            color: white;           /* White text */
            background-color: #8357ae; /* Purple for primary button */
            padding: 8px 12px;      /* Adjust padding */
            border-radius: 5px;     /* Rounded corners */
            border: none;           /* Removes default border */
            display: inline-block;  /* Makes <a> look like a button */
            font-weight: bold;      /* Bold text */
            text-align: center;
            cursor: pointer;
            transition: 0.3s;
        }

        .custom-btn:hover {
            background-color: #855bae; /* Darker shade on hover */
        }

        .btn-danger {
            background-color: #d43e4a; /* Red for delete button */
        }

        .btn-danger:hover {
            background-color: #dc4d5d; /* Darker red on hover */
        }



        /* Remove black border on focus */
        #sortDropdown:focus {
            outline: none !important; /* Removes the default focus outline */
            box-shadow: none !important; /* Removes Bootstrap's default focus effect */
            border: 1px solid #ddd !important; /* Optional: Keep a subtle border */
        }

        .status-pending {
           color: #efad06; /* Yellowish color */
           font-weight: bold;
           font-size: 17px;
        }

        .status-predicted {
           color: #28a745; /* Green color */
           font-weight: bold;
        }



    </style>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lab Assistant Dashboard</title>
    <style>
        .hidden { display: none; }  /* Hides specific columns */
    </style>
    <script>
        function updateSort() {
            const sortValue = document.getElementById("sortDropdown").value;
            window.location.href = "{{ url_for('lab_assistant_dashboard') }}?sort=" + sortValue;
        }
    </script>
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">Feto</span><span class="health">Health</span>
        </div>
        <div class="header-center">

            <p>  Lab Assistant Dashboard</p>

        </div>
        <div class="header-right">


            <a href="{{ url_for('home') }}" class="logout-btn">Logout</a>


        </div>
    </nav>


    <div class="container mt-4">

        <!-- Sorting Dropdown -->

        <div class="mb-3" style="text-align: left; margin-bottom: 15px;">

            <label for="sortDropdown" class="me-2">Sort By:</label>
            <select id="sortDropdown" class="form-select w-auto" onchange="updateSort()">
                <option value="new_to_old" {% if selected_sort == 'new_to_old' %}selected{% endif %}>New to Old</option>
                <option value="old_to_new" {% if selected_sort == 'old_to_new' %}selected{% endif %}>Old to New</option>
                <option value="pending" {% if selected_sort == 'pending' %}selected{% endif %}>Pending</option>
                <option value="predicted" {% if selected_sort == 'predicted' %}selected{% endif %}>Predicted</option>
            </select>
        </div>

        <!-- Reports Table -->
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Patient Username</th>
                    <th>Patient Email</th>
                    <th>Patient Phone</th>
                    <th class="hidden">Lab Assistant Name</th>
                    <th>Date</th>
                    <th>Time</th>
                    <th>Values</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>

            <tbody>
                {% for report in reports %}
                <tr>
                    <td>{{ report.patient_username }}</td>
                    <td>{{ report.patient_email }}</td>
                    <td>{{ report.patient_phone }}</td>
                    <td class="hidden">{{ report.lab_assistant_username }}</td>
                    <td>{{ report.date }}</td>
                    <td>{{ report.time }}</td>
                    <td>
                        <a href="{{ url_for('enter_values', report_id=report._id) }}" class="btn btn-primary btn-sm custom-btn">
                            Enter Your Values
                        </a>
                    </td>

                    <td class="{% if report.status == 'Pending' %}status-pending{% endif %}">{{ report.status }}</td>


                    <td>

                        <form action="{{ url_for('delete_report', report_id=report._id) }}" method="POST" style="display:inline;">
                            <button type="submit" class="btn btn-danger btn-sm custom-btn">Delete</button>
                        </form>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>

    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

</body>
</html>

login.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Fetal Health Prediction</title>
    <style>
         body {
            font-family: Arial, sans-serif;
            background-color: #F7F7FF;
            display: flex;
            flex-direction: column; /* Stack navbar and container */
            align-items: center;
            height: 100vh;
            margin: 0;
        }


        /* Navbar Styling */
        .header {
           display: flex;
           justify-content: space-between;
           align-items: center;
           padding: 20px 12px;
           background: #fffefefe;
           box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
           width: 100%; /* Ensures full width */
           position: fixed; /* Fixes navbar at the top */
           top: 0;
           left: 0;
           z-index: 1000; /* Ensures it stays on top */
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 20px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }


        /* Centering Login Container */
        .login-container {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            text-align: center;
            width: 350px;
            margin-top: 100px; /* Space below navbar */
        }




        h2 {
            color: #1976D2;
        }

        .input-group {
            margin-bottom: 15px;
            text-align: left;
        }

        label {
            display: block;
            font-weight: bold;
            margin-bottom: 5px;
        }

        input, select {
            width: 100%;
            padding: 10px;
            margin-top: 5px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        button {
            width: 100%;
            background: #1976D2;
            color: white;
            border: none;
            padding: 10px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 10px;
        }

        button:hover {
            background: #1565C0;
        }

        .message {
            margin-top: 10px;
            font-size: 14px;
        }

        .message a {
            color: #1976D2;
            text-decoration: none;
        }

        .message a:hover {
            text-decoration: underline;
        }

        .flash-messages {
            margin-bottom: 15px;
            padding: 10px;
            border-radius: 5px;
            text-align: center;
        }

        .flash-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .flash-error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
    </style>
    <script>
        function showAdditionalFields() {
            var role = document.getElementById("role").value;
            document.getElementById("lab_id").style.display = "none";
            document.getElementById("doctor_id").style.display = "none";

            if (role === "lab_assistant") {
                document.getElementById("lab_id").style.display = "block";
            } else if (role === "doctor") {
                document.getElementById("doctor_id").style.display = "block";
            }
        }
    </script>
</head>
<body>

    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">Feto</span><span class="health">Health</span>
        </div>
        <div class="header-center">

            <a href="{{ url_for('home') }}">Home</a>
            <a href="{{ url_for('about') }}">About </a>


        </div>
        <div class="header-right">

            <a href="{{ url_for('home') }}" class="logout-btn">Logout</a>



        </div>
    </nav>


    <div class="login-container">
        <h2>FethoHealth Login</h2>

        <!-- Flash Messages -->
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <p class="flash-messages flash-{{ category }}">{{ message }}</p>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <form method="POST" action="{{ url_for('login') }}">

            <div class="input-group">
                <label for="role">Select Role</label>
                <select id="role" name="role" required onchange="showAdditionalFields()">
                    <option value="" disabled selected>-- Select Role --</option>
                    <option value="patient">Patient</option>
                    <option value="doctor">Doctor</option>
                    <option value="lab_assistant">Lab Assistant</option>
                </select>
            </div>

            <div class="input-group">
                <label for="email">Email</label>
                <input type="email" id="email" name="email" required>
            </div>

            <div class="input-group">
                <label for="password">Password</label>
                <input type="password" id="password" name="password" required>
            </div>

            <div class="input-group" id="lab_id" style="display: none;">
                <label for="lab_assistant_id">Lab Assistant ID</label>
                <input type="text" id="lab_assistant_id" name="lab_assistant_id">
            </div>

            <div class="input-group" id="doctor_id" style="display: none;">
                <label for="doctor_id">Doctor ID</label>
                <input type="text" id="doctor_id" name="doctor_id">
            </div>

            <button type="submit">Login</button>

            <div class="message">
                Don't have an account? <a href="{{ url_for('register') }}">Sign Up</a>
            </div>
        </form>
    </div>




</body>
</html>

patient_dashboard.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Dashboard</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <style>
        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background: #fffefefe;
            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }



          .container {
            max-width: 800px;
            background: #ffffff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

        h2 {
           font-weight: bold;
           color: #2c3e50;
        }

        .card {
           border: 1px solid #ddd;
           border-radius: 10px;
           box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        }

        .card-title {
           font-weight: bold;
           color: #3498db;
        }

        .list-group-item {
            background-color: #f4f6f7;
            border: none;
            border-radius: 5px;
            margin-bottom: 5px;
        }

        .alert-warning {
           font-weight: bold;
        }

        .btn-primary {
           background-color: #007bff;
           border: none;
           border-radius: 5px;
           padding: 10px 20px;
           font-size: 16px;
           font-weight: bold;
        }

        .btn-primary:hover {
            background-color: #0056b3;
        }

        .text-center {
           text-align: center;
        }

        p {
           font-size: 19px;
        }

    </style>

</head>
<body>

    <!-- Navigation Bar -->
    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">Feto</span><span class="health">Health</span>
        </div>
        <div class="header-center">

            <a href="{{ url_for('home') }}">Home</a>
            <a href="{{ url_for('about') }}">About </a>

        </div>
        <div class="header-right">


            <a href="{{ url_for('home') }}" class="logout-btn">Logout</a>



        </div>
    </nav>

    <div class="container mt-4">
        <h2 class="text-center">Welcome {{ username }}</h2>

        {% if lab_report %}
        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Prediction Result</h5>
                <p><strong>Fetal Health Condition:</strong> {{ lab_report.prediction }}</p>
                <p><strong>Prediction Confidence:</strong></p>
                <ul class="list-group">
                    <li class="list-group-item">Normal: {{ lab_report.probabilities[0] | round(3) }}</li>
                    <li class="list-group-item">Suspect: {{ lab_report.probabilities[1] | round(3) }}</li>
                    <li class="list-group-item">Pathological: {{ lab_report.probabilities[2] | round(3) }}</li>
                </ul>
            </div>
        </div>



        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Doctor Remark </h5>
                <p>{{ lab_report.doctor_message }}</p>
            </div>
        </div>
        {% else %}
        <p class="alert alert-warning mt-4">No prediction report available yet.</p>
        {% endif %}

        <div class="text-center mt-4">
            <a href="{{ url_for('download_report') }}" class="btn btn-primary">Download Report</a>

        </div>



    </div>
</body>
</html>

predict_result.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Prediction Result</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <style>
        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F7F7FF;

            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }
        .header-center p {
           font-size: 25px; /* Adjust the text size */
           text-align: center;
           font-weight: bold; /* Make the text bold */
           color: #000099; /* Change text color to dark blue */
           text-transform: uppercase; /* Convert text to uppercase */
           letter-spacing: 1px; /* Add spacing between letters */
           margin: 0; /* Remove default margin */
           padding: 5px 10px; /* Add padding */

           border-radius: 8px; /* Rounded corners */

        }



        .container {
           max-width: 900px;
           background: #ffffff;
           padding: 20px;
           border-radius: 10px;
           box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

        /* Header */
        h2 {
           font-size: 28px;
           font-weight: bold;
           color: #007bff;
        }

        /* Card Styling */
        .card {
            border-radius: 8px;
            box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
        }

        .card-title {
            font-size: 24px;
            font-weight: bold;
            color: #333;
        }

        .card-body p {
            font-size: 18px;
            color: #555;
        }

        /* Alert Styling */
        .alert-info {
            background-color: #d1ecf1;
            color: #0c5460;
            font-size: 18px;
            font-weight: bold;
            border-radius: 8px;
        }

        /* List Group */
        .list-group-item {
           font-size: 17.5px;
           border-radius: 5px;
        }

        /* Button Styling */
        .btn-primary {
            background-color: #007bff;
            border: none;
            padding: 8px 15px;
            font-size: 14px;
            border-radius: 5px;
            transition: transform 0.2s, background-color 0.3s;
        }

        .btn-primary:hover {
            background-color: #0056b3;
            transform: scale(1.05);
        }

        /* Textarea */
        textarea {
           border-radius: 5px;
           border: 1px solid #ccc;
           padding: 10px;
           font-size: 14px;
           resize: none;
        }

        textarea:focus {
           border-color: #007bff;
           outline: none;
           box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        }



    </style>
</head>


    <!-- Navigation Bar -->
    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">Feto</span><span class="health">Health</span>
        </div>
        <div class="header-center">
            <div class="header-center">

                <p> Result</p>

            </div>
        </div>
        <div class="header-right">

            <a href="{{ url_for('doctor_dashboard') }}">Go Back</a>




        </div>
    </nav>

<body class="bg-light">
    <div class="container mt-5">
        <div class="text-center">
            <h2 class="mb-4">Prediction Result</h2>

            <!-- Patient Details -->
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">Patient Details:</h5>
                    <p><strong>Username:</strong> {{ username }}</p>
                    <p><strong>Phone Number:</strong> {{ phone }}</p>
                </div>
            </div>

            <!-- Prediction Outcome -->
            <div class="alert alert-info">
                <h4>The predicted fetal health condition is: <strong>{{ prediction }}</strong></h4>
            </div>

            <!-- Prediction Confidence -->
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">Prediction Confidence:</h5>
                    <ul class="list-group">
                        <li class="list-group-item">Normal: {{ probabilities[0] | round(3) }}</li>
                        <li class="list-group-item">Suspect: {{ probabilities[1] | round(3) }}</li>
                        <li class="list-group-item">Pathological: {{ probabilities[2] | round(3) }}</li>
                    </ul>
                </div>
            </div>

            <!-- Top Influencing Features -->
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">Top 3 Influencing Features:</h5>
                    <ul class="list-group">
                        {% for feature, importance in top_features %}
                            <li class="list-group-item">
                                <strong>{{ feature }}</strong>: {{ importance | round(3) }}
                            </li>
                        {% endfor %}
                    </ul>
                </div>
            </div>

            <!-- Doctor's Message Form -->
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">Remarks:</h5>
                    <form action="{{ url_for('add_doctor_message', report_id=report_id) }}" method="POST">
                        <textarea name="doctor_message" class="form-control" rows="3" placeholder="Type your message here..." required></textarea>
                        <button type="submit" class="btn btn-primary mt-3">Submit Message</button>
                    </form>
                </div>
            </div>


        </div>
    </div>
</body>
</html>

register.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .hidden { display: none; }
        .error { color: red; font-size: 14px; }
        .message { color: #171618; font-weight: bold; }

        .container { max-width: 500px; margin-top: 50px; }

        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F7F7FF; /* Soft background */

            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }
        .message a {
            text-decoration: none;
            color: #896ca6;

        }



    </style>
</head>
<body>

    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">Feto</span><span class="health">Health</span>
        </div>
        <div class="header-center">

            <a href="{{ url_for('home') }}">Home</a>
            <a href="{{ url_for('about') }}">About </a>


        </div>
        <div class="header-right">

            <a href="{{ url_for('home') }}" class="logout-btn">Logout</a>



        </div>
    </nav>

    <div class="container">
        <div class="card shadow p-4">
            <h2 class="text-center mb-3"> FetoHealth Register</h2>
            {% with messages = get_flashed_messages(with_categories=true) %}
                {% if messages %}
                    {% for category, message in messages %}
                        <div class="alert alert-info">{{ message }}</div>
                    {% endfor %}
                {% endif %}
            {% endwith %}
            <form id="registerForm" action="{{ url_for('register') }}" method="POST">
                <div class="mb-3">
                    <label for="role" class="form-label">Select Role:</label>
                    <select id="role" name="role" class="form-select" required>
                        <option value="">Select Role</option>
                        <option value="patient">Patient</option>
                        <option value="lab_assistant">Lab Assistant</option>
                        <option value="doctor">Doctor</option>
                    </select>
                </div>

                <div id="labAssistantIDField" class="mb-3 hidden">
                    <input type="text" name="lab_assistant_id" class="form-control" placeholder="Lab Assistant ID">
                </div>

                <div id="doctorIDField" class="mb-3 hidden">
                    <input type="text" name="doctor_id" class="form-control" placeholder="Doctor ID">
                </div>

                <div id="commonFields" class="hidden">
                    <div class="mb-3">
                        <input type="text" name="username" class="form-control" placeholder="Username" required>
                    </div>
                    <div class="mb-3">
                        <input type="password" name="password" id="password" class="form-control" placeholder="Password" required>
                        <span id="passwordStrength" class="error"></span>
                    </div>
                    <div class="mb-3">
                        <input type="password" name="confirm_password" id="confirm_password" class="form-control" placeholder="Confirm Password" required>
                        <span id="passwordError" class="error"></span>
                    </div>
                    <div class="mb-3">
                        <input type="email" name="email" id="email" class="form-control" placeholder="Email Address" required>
                        <span id="emailError" class="error"></span>
                    </div>
                    <div class="mb-3">
                        <input type="text" name="phone" id="phone" class="form-control" placeholder="Phone Number" required>
                        <span id="phoneError" class="error"></span>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary w-100">Register</button>

                <div class="message">
                    Already have an account? <a href="{{ url_for('login') }}">Login</a>
                </div>
            </form>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.getElementById("role").addEventListener("change", function() {
            var role = this.value;
            var commonFields = document.getElementById("commonFields");
            var labAssistantField = document.getElementById("labAssistantIDField");
            var doctorField = document.getElementById("doctorIDField");

            commonFields.classList.toggle("hidden", !role);
            labAssistantField.style.display = (role === "lab_assistant") ? "block" : "none";
            doctorField.style.display = (role === "doctor") ? "block" : "none";
        });

        document.getElementById("password").addEventListener("input", function() {
            var password = this.value;
            var strengthIndicator = document.getElementById("passwordStrength");
            var strongPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6,}$/;

            if (password.length < 6) {
                strengthIndicator.textContent = "Password must be at least 6 characters long";
                strengthIndicator.style.color = "red";
            } else if (strongPasswordRegex.test(password)) {
                strengthIndicator.textContent = "Strong Password";
                strengthIndicator.style.color = "green";
            } else {
                strengthIndicator.textContent = "Weak Password - Include uppercase, lowercase, number, and special character";
                strengthIndicator.style.color = "red";
            }
        });

        document.getElementById("registerForm").addEventListener("submit", function(event) {
            var password = document.getElementById("password").value;
            var confirmPassword = document.getElementById("confirm_password").value;
            var email = document.getElementById("email").value;
            var phone = document.getElementById("phone").value;
            var passwordError = document.getElementById("passwordError");
            var emailError = document.getElementById("emailError");
            var phoneError = document.getElementById("phoneError");

            passwordError.textContent = "";
            emailError.textContent = "";
            phoneError.textContent = "";

            if (password.length < 6) {
                passwordError.textContent = "Password must be at least 6 characters long.";
                event.preventDefault();
            }
            if (password !== confirmPassword) {
                passwordError.textContent = "Passwords do not match.";
                event.preventDefault();
            }

            var emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
            if (!emailPattern.test(email)) {
                emailError.textContent = "Invalid email format.";
                event.preventDefault();
            }

            if (!/^\d{10}$/.test(phone)) {
                phoneError.textContent = "Phone number must be 10 digits.";
                event.preventDefault();
            }
        });
    </script>



</body>
</html>

view_values.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Entered Values</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F7F7FF;

            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }
        .header-center p {
           font-size: 25px; /* Adjust the text size */
           text-align: center;
           font-weight: bold; /* Make the text bold */
           color: #000099; /* Change text color to dark blue */
           text-transform: uppercase; /* Convert text to uppercase */
           letter-spacing: 1px; /* Add spacing between letters */
           margin: 0; /* Remove default margin */
           padding: 10px 20px; /* Add padding */

           border-radius: 8px; /* Rounded corners */

        }

        .form-container {
            max-width: 600px;
            margin: 50px auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        }

        h1 {
           text-align: center;
           color: #6617b5;
           font-weight: bold;
           font-size: 30px;
           margin-bottom: 15px;
        }

        .form-group {
           display: flex;
           align-items: center;
           margin-bottom: 10px;
           justify-content: space-between; /* Ensures consistent spacing */
        }

        .form-group label {
            flex: 1;
            font-weight: bold;
            text-align: left;
            padding-right: 30px;
            white-space: nowrap; /* Prevents label from wrapping */
        }


        .form-group span {
            width: 100px; /* Fixed width for the value box */
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            text-align: center;
            background: #f9f9f9;
            flex-shrink: 0; /* Prevents it from shrinking */
        }

        .btn-submit {
            width: 100%;
            padding: 12px;
            background: #6617b5;
            color: white;
            font-weight: bold;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: 0.3s;
            text-align: center;
            display: block;
            margin-top: 20px;
            text-decoration: none;
        }

        .btn-submit:hover {
            background: #530d98;
        }

    </style>
</head>
<body>


<!-- Navigation Bar -->
<nav class="header">
    <div class="header-left">
        <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
        <span class="feto">Feto</span><span class="health">Health</span>
    </div>
    <div class="header-center">

        <p> View Test Values</p>

    </div>
    <div class="header-right">

        <a href="{{ url_for('doctor_dashboard') }}">Go Back</a>



    </div>
</nav>



<div class="form-container">
    <h1>Patient: {{ patient.username }}</h1>
    <p><strong>Lab Assistant Name:</strong> {{ lab_assistant.username }}</p>
    <p><strong>Entered Values:</strong></p>

    {% for key, value in report['values'].items() %}
    <div class="form-group">
        <label>{{ key }}</label>
        <span>{{ value }}</span>
    </div>
    {% endfor %}


</div>
</body>
</html>

app.py

from flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify
from flask_pymongo import PyMongo
import re
from werkzeug.security import generate_password_hash, check_password_hash
import pickle
import pandas as pd
from sklearn.preprocessing import StandardScaler
import shap
import numpy as np
from bson import ObjectId
from pymongo import MongoClient
from bson.objectid import ObjectId
from datetime import datetime
from flask import send_file, request
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
import io
import os
from flask import current_app
from reportlab.platypus import Image
from reportlab.lib.utils import ImageReader



app = Flask(__name__)
app.secret_key = 'your_secret_key'

# 🔹 MongoDB Atlas Configuration
app.config["MONGO_URI"] = "mongodb+srv://niyacv13:niyaviju@cluster0.78z9j.mongodb.net/fetalstatus?retryWrites=true&w=majority&appName=Cluster0"
mongo = PyMongo(app)
db = mongo.db  # Get database reference

# 🔹 Ensure MongoDB is connected
if db is None:
    raise Exception("MongoDB connection failed!")


admin_collection = db.admin_users
users_collection = db.users  # Define the users collection
lab_reports_collection = db["lab_reports"]





if not admin_collection.find_one({"email": "fhadmin@gmail.com"}):
    admin_collection.insert_one({"email": "fhadmin@gmail.com", "password": "admin123"})


# Home Page
@app.route('/')
def home():
    return render_template('home.html')


@app.route('/about')
def about():
    return render_template('about.html')





@app.route("/admin_login", methods=["GET", "POST"])
def admin_login():
    if request.method == "POST":
        email = request.form.get("email")  # Changed to email
        password = request.form.get("password")

        admin = admin_collection.find_one({"email": email, "password": password})  # Search by email
        if admin:
            session["admin"] = True
            return redirect(url_for("admin_dashboard"))
        else:
            flash("Invalid credentials", "error")

    return render_template("admin_login.html")



@app.route("/admin_dashboard")
def admin_dashboard():
    if "admin" not in session:
        return redirect(url_for("admin_login"))
    return render_template("admin_dashboard.html")


@app.route("/fetch_users/<role>")
def fetch_users(role):
    if "admin" not in session:
        return jsonify([])

    users = users_collection.find({"role": role})
    users_list = []

    for user in users:
        user_id = user.get("lab_assistant_id") if role == "lab_assistant" else user.get("doctor_id")
        updated_at = user.get("updated_at", "N/A")

        if updated_at != "N/A":
            date_part, time_part = updated_at.split(" ")
        else:
            date_part, time_part = "N/A", "N/A"

        users_list.append({
            "user_id": user_id,
            "_id": str(user["_id"]),  # Convert ObjectId to string
            "username": user["username"],
            "email": user["email"],
            "password": user["password"],
            "status": user.get("status", "pending"),
            "updated_date": date_part,
            "updated_time": time_part,
            "mongo_id": user["_id"]  # Store ObjectId for sorting
        })

    status_order = {"pending": 0, "approved": 1, "rejected": 2}

    users_list.sort(key=lambda x: (
        status_order[x["status"]],          # Sort by status (pending first)
        str(x["mongo_id"]) if x["status"] == "pending" else "",  # Sort pending users by ObjectId (newest first)
        x["updated_date"] if x["status"] != "pending" else ""    # Sort approved/rejected by date
    ), reverse=False)

    return jsonify(users_list)


@app.route("/update_status", methods=["POST"])
def update_status():
    if "admin" not in session:
        return jsonify({"message": "Unauthorized"}), 401

    data = request.json
    user_id = data["userId"]
    status = data["status"]
    update_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    user = users_collection.find_one({"_id": ObjectId(user_id)})
    if user:
        users_collection.update_one(
            {"_id": ObjectId(user_id)},
            {"$set": {"status": status, "updated_at": update_time}}
        )
        return jsonify({"message": f"User {status} successfully!", "role": user["role"], "updated_at": update_time})

    return jsonify({"message": "User not found"}), 404



@app.route("/delete_user", methods=["POST"])
def delete_user():
    if "admin" not in session:
        return jsonify({"message": "Unauthorized"}), 401

    data = request.json
    user_id = data["userId"]

    result = users_collection.delete_one({"_id": ObjectId(user_id)})
    if result.deleted_count > 0:
        return jsonify({"message": "User deleted successfully!"})

    return jsonify({"message": "User not found"}), 404






@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        role = request.form.get("role")
        username = request.form.get("username")
        password = request.form.get("password")
        confirm_password = request.form.get("confirm_password")
        email = request.form.get("email")
        phone = request.form.get("phone")
        lab_assistant_id = request.form.get("lab_assistant_id")
        doctor_id = request.form.get("doctor_id")

        # Validation for Lab Assistant ID
        lab_assistant_pattern = r"^FHL([1-5][0-9]{2}|600)$"
        doctor_pattern = r"^FHD([1-5][0-9]{2}|600)$"

        if role == "lab_assistant":
            if not lab_assistant_id or not re.match(lab_assistant_pattern, lab_assistant_id):
                flash("Invalid Lab Assistant ID!", "error")
                return redirect(url_for("register"))

        if role == "doctor":
            if not doctor_id or not re.match(doctor_pattern, doctor_id):
                flash("Invalid Doctor ID!", "error")
                return redirect(url_for("register"))

        if role in ["lab_assistant", "doctor"]:
            status = "pending"
        else:
            status = "approved"

        # **Check for existing credentials separately**
        if users_collection.find_one({"username": username}):
            flash("Username already exists!", "error")
            return redirect(url_for("register"))

        if users_collection.find_one({"email": email}):
            flash("Email ID already exists!", "error")
            return redirect(url_for("register"))

        if users_collection.find_one({"phone": phone}):
            flash("Phone number already exists!", "error")
            return redirect(url_for("register"))

        if role == "lab_assistant" and users_collection.find_one({"lab_assistant_id": lab_assistant_id}):
            flash("Lab Assistant ID already exists!", "error")
            return redirect(url_for("register"))

        if role == "doctor" and users_collection.find_one({"doctor_id": doctor_id}):
            flash("Doctor ID already exists!", "error")
            return redirect(url_for("register"))

        # Strong Password Validation
        strong_password_regex = r"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6,}$"
        if not re.match(strong_password_regex, password):
            flash("Weak password! Use uppercase, lowercase, number, and special character.", "error")
            return redirect(url_for("register"))

        if password != confirm_password:
            flash("Passwords do not match", "error")
            return redirect(url_for("register"))

        # Email Validation
        email_pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
        if not re.match(email_pattern, email):
            flash("Invalid email format", "error")
            return redirect(url_for("register"))

        # Phone Number Validation
        if not re.match(r"^\d{10}$", phone):
            flash("Phone number must be 10 digits", "error")
            return redirect(url_for("register"))

        # Create user document with role-specific fields
        user_data = {
            "role": role,
            "username": username,
            "password": password,
            "email": email,
            "phone": phone,
            "status": status
        }

        if role == "lab_assistant":
            user_data["lab_assistant_id"] = lab_assistant_id
        elif role == "doctor":
            user_data["doctor_id"] = doctor_id

        users_collection.insert_one(user_data)

        if status == "approved":
            flash("Registration successful, You can now log in.", "success")
        else:
            flash("Registration successful , Login to see admin status.", "info")

        return redirect(url_for("register"))

    return render_template("register.html")






@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        role = request.form.get("role")
        email = request.form.get("email")
        password = request.form.get("password")
        doctor_id = request.form.get("doctor_id")
        lab_assistant_id = request.form.get("lab_assistant_id")

        user = users_collection.find_one({"email": email})

        if not user:
            flash("User Does Not Exist!", "error")
            return redirect(url_for("login"))

        if user["role"] != role:
            flash("Invalid Role!", "error")
            return redirect(url_for("login"))

        if user["password"] != password:
            flash("Invalid Password!", "error")
            return redirect(url_for("login"))

        if user["status"] == "pending":
            flash("Your account is awaiting admin approval.", "error")
            return redirect(url_for("login"))

        if user["status"] == "rejected":
            flash("Admin has rejected your account.", "error")
            return redirect(url_for("login"))

        # Store user details in session
        session["user_id"] = str(user["_id"])
        session["username"] = user["username"]
        session["role"] = user["role"]

        # Role-based redirection
        if role == "patient":

            return redirect(url_for("patient_dashboard"))

        elif role == "doctor":
            if not doctor_id or doctor_id != user.get("doctor_id"):
                flash("Invalid Doctor ID!", "error")
                return redirect(url_for("login"))

            return redirect(url_for("doctor_dashboard"))

        elif role == "lab_assistant":
            if not lab_assistant_id or lab_assistant_id != user.get("lab_assistant_id"):
                flash("Invalid Lab Assistant ID!", "error")
                return redirect(url_for("login"))

            return redirect(url_for("lab_assistant_dashboard"))

        flash("User Does Not Exist!", "error")
        return redirect(url_for("login"))

    return render_template("login.html")






@app.route("/patient_dashboard")
def patient_dashboard():
    if "username" not in session or session["role"] != "patient":
        return redirect(url_for("login"))

    patient_username = session["username"]

    # Fetch the latest lab report for the logged-in patient
    lab_report = lab_reports_collection.find_one(
        {"patient_username": patient_username},
        sort=[("date", -1), ("time", -1)]  # Get the latest report
    )

    if lab_report:
        # Convert ObjectId to string and ensure correct data formatting
        lab_report["_id"] = str(lab_report["_id"])

    return render_template("patient_dashboard.html", username=patient_username, lab_report=lab_report)



@app.route("/download_report")
def download_report():
    if "username" not in session or session["role"] != "patient":
        return redirect(url_for("login"))

    patient_username = session["username"]

    # Fetch the latest lab report for the logged-in patient
    lab_report = lab_reports_collection.find_one(
        {"patient_username": patient_username},
        sort=[("date", -1), ("time", -1)]
    )

    if not lab_report:
        return "No report found!", 404

    # Get doctor name from the request
    doctor_name = request.args.get("doctor_name", "Dr. Nisa")

    # Create PDF in memory
    pdf_buffer = io.BytesIO()
    c = canvas.Canvas(pdf_buffer, pagesize=A4)
    width, height = A4

    # Set margins
    margin = 40

    # Draw Border
    c.setStrokeColorRGB(0, 0, 0)
    c.setLineWidth(2)
    c.rect(margin, margin, width - 2 * margin, height - 2 * margin, stroke=1, fill=0)


    # Report Heading (Center)
    c.setFont("Helvetica-Bold", 20)
    c.drawString(width / 2 - 130, height - 80, "FETOHEALTH REPORT")

    # Patient and Doctor Details
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, height - 120, "Patient Details:")
    c.setFont("Helvetica", 12)
    c.drawString(50, height - 140, f"Name: {lab_report['patient_username']}")
    c.drawString(50, height - 160, f"Email: {lab_report['patient_email']}")
    c.drawString(50, height - 180, f"Phone: {lab_report['patient_phone']}")

    # Lab Assistant and Doctor Details (Right Side)
    c.setFont("Helvetica-Bold", 12)
    c.drawString(width / 2 + 50, height - 120, "Medical Staff:")
    c.setFont("Helvetica", 12)
    c.drawString(width / 2 + 50, height - 140, f"Lab Assistant: {lab_report['lab_assistant_username']}")
    c.drawString(width / 2 + 50, height - 160, f"Doctor: {doctor_name}")


    c.setFont("Helvetica-Bold", 12)
    c.drawString(width / 2 + 50, height - 180, "Report Generated On:")
    c.setFont("Helvetica", 12)
    c.drawString(width / 2 + 50, height - 200, f"Date: {lab_report['date']}")
    c.drawString(width / 2 + 50, height - 220, f"Time: {lab_report['time']}")


    shift_down = 20  # Adjust this value to move everything lower

    # Prediction Result (Shifted)
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, height - (220 + shift_down), "Prediction Result:")
    c.setFont("Helvetica", 12)
    c.drawString(70, height - (240 + shift_down), f"Fetal Health Condition: {lab_report['prediction']}")

    # Prediction Confidence (Shifted)
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, height - (270 + shift_down), "Prediction Confidence:")
    c.setFont("Helvetica", 12)
    c.drawString(70, height - (290 + shift_down), f"Normal: {round(lab_report['probabilities'][0], 3)}")
    c.drawString(70, height - (310 + shift_down), f"Suspect: {round(lab_report['probabilities'][1], 3)}")
    c.drawString(70, height - (330 + shift_down), f"Pathological: {round(lab_report['probabilities'][2], 3)}")

    # Top Contributing Features (Shifted)
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, height - (370 + shift_down), "Top 3 Contributing Features:")
    c.setFont("Helvetica", 12)
    y = height - (390 + shift_down)  # Adjusted y-position
    for feature in lab_report["top_features"]:
        c.drawString(70, y, f"- {feature}")
        y -= 20

    # Doctor's Remarks (Shifted)
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y - 40, "Doctor's Remarks:")
    c.setFont("Helvetica", 12)
    c.drawString(70, y - 60, f"{lab_report['doctor_message']}")

    # Save and return PDF
    c.save()
    pdf_buffer.seek(0)

    return send_file(pdf_buffer, as_attachment=True, download_name="Fetal_Health_Report.pdf", mimetype="application/pdf")



@app.route('/lab_assistant_dashboard', methods=['GET', 'POST'])
def lab_assistant_dashboard():
    if "username" not in session or session["role"] != "lab_assistant":
        return redirect(url_for("login"))

    lab_reports_collection = mongo.db.lab_reports
    users_collection = mongo.db.users

    # Fetch all patients who do not yet have an entry in lab_reports
    existing_patients = {report["patient_username"] for report in lab_reports_collection.find()}
    new_patients = users_collection.find({"role": "patient", "username": {"$nin": list(existing_patients)}})

    # Insert missing patients into lab_reports with empty date, time, and status
    for patient in new_patients:
        lab_reports_collection.insert_one({
            "patient_username": patient["username"],
            "patient_email": patient["email"],
            "patient_phone": patient["phone"],
            "lab_assistant_username": session["username"],  # Storing lab assistant username
            "date": "",
            "time": "",
            "status": "",
            "values": None
        })

    # Get selected sorting/filtering option from the dropdown
    sort_option = request.args.get("sort", "new_to_old")  # Default to 'new to old'

    query = {"lab_assistant_username": session["username"]}

    if sort_option == "pending":
        query["status"] = "Pending"
    elif sort_option == "predicted":
        query["status"] = "Predicted"

    # Custom sorting: New users (status="") appear at the top, then sort by date/time
    sort_order = [
        ("status", 1),  # Ensures status="" appears first
        ("date", -1),
        ("time", -1)
    ]

    if sort_option == "old_to_new":
        sort_order = [
            ("status", 1),  # Ensures status="" appears first
            ("date", 1),
            ("time", 1)
        ]

    # Fetch reports with sorting and filtering
    reports = list(lab_reports_collection.find(query).sort(sort_order))

    return render_template("lab_assistant_dashboard.html", reports=reports, selected_sort=sort_option)




@app.route('/enter_values/<report_id>', methods=['GET', 'POST'])
def enter_values(report_id):
    if "username" not in session or session["role"] != "lab_assistant":
        return redirect(url_for("login"))

    lab_reports_collection = mongo.db.lab_reports
    report = lab_reports_collection.find_one({"_id": ObjectId(report_id)})

    if request.method == "POST":
        test_values = {field: request.form[field] for field in [
            'baseline_value', 'accelerations', 'fetal_movement', 'uterine_contractions',
            'light_decelerations', 'severe_decelerations', 'prolongued_decelerations',
            'abnormal_short_term_variability', 'mean_value_of_short_term_variability',
            'percentage_of_time_with_abnormal_long_term_variability', 'mean_value_of_long_term_variability',
            'histogram_width', 'histogram_min', 'histogram_max', 'histogram_number_of_peaks',
            'histogram_number_of_zeroes', 'histogram_mode', 'histogram_mean', 'histogram_median',
            'histogram_variance', 'histogram_tendency'
        ]}

        updated_date = datetime.now().strftime("%Y-%m-%d")
        updated_time = datetime.now().strftime("%H:%M:%S")

        lab_reports_collection.update_one(
            {"_id": ObjectId(report_id)},
            {"$set": {
                "values": test_values,
                "date": updated_date,
                "time": updated_time,
                "status": "Pending"
            }}
        )

        return redirect(url_for("lab_assistant_dashboard"))

    return render_template("enter_values.html", patient=report)


@app.route('/delete_report/<report_id>', methods=['POST'])
def delete_report(report_id):
    if "username" not in session or session["role"] != "lab_assistant":
        return redirect(url_for("login"))

    lab_reports_collection = mongo.db.lab_reports

    # Remove report only from the dashboard (but keep it in the database)
    lab_reports_collection.update_one(
        {"_id": ObjectId(report_id)},
        {"$set": {"lab_assistant_username": None}}
    )

    return redirect(url_for("lab_assistant_dashboard"))







# Load trained model, scaler, and SHAP explainer
with open("fetal_ensemble_model.pkl", "rb") as model_file:
    ensemble_model = pickle.load(model_file)
with open("fetal_scaler.pkl", "rb") as scaler_file:
    scaler = pickle.load(scaler_file)
with open("fetal_shap_explainer.pkl", "rb") as shap_file:
    loaded_explainer = pickle.load(shap_file)

# Class label mapping
class_labels = {1: 'Normal', 2: 'Suspect', 3: 'Pathological'}


@app.route('/doctor_dashboard')
def doctor_dashboard():
    if "username" not in session or session["role"] != "doctor":
        return redirect(url_for("login"))

    lab_reports_collection = mongo.db.lab_reports

    # Get selected sorting option from the dropdown
    sort_option = request.args.get("sort", "new_to_old")  # Default to 'new to old'

    query = {}  # Default query, fetch all reports

    # Filtering logic based on status
    if sort_option == "pending":
        query["status"] = "Pending"
    elif sort_option == "predicted":
        query["status"] = "Predicted"

    # Sorting logic
    sort_order = [("date", -1), ("time", -1)]  # Default: New to Old
    if sort_option == "old_to_new":
        sort_order = [("date", 1), ("time", 1)]

    # Fetch reports with sorting and filtering
    reports = list(lab_reports_collection.find(query).sort(sort_order))

    return render_template("doctor_dashboard.html", reports=reports, selected_sort=sort_option)



@app.route('/view_values/<report_id>')
def view_values(report_id):
    if "username" not in session or session["role"] != "doctor":
        return redirect(url_for("login"))

    lab_reports_collection = mongo.db.lab_reports
    users_collection = mongo.db.users  # Assuming you have a users collection

    report = lab_reports_collection.find_one({'_id': ObjectId(report_id)})

    if not report:
        flash("Report not found.", "danger")
        return redirect(url_for("doctor_dashboard"))

    # Fetch patient details
    patient = users_collection.find_one({'username': report.get('patient_username')})
    lab_assistant = users_collection.find_one({'username': report.get('lab_assistant_username')})

    return render_template("view_values.html",
                           report=report,
                           patient=patient,
                           lab_assistant=lab_assistant)



@app.route('/predict/<report_id>', methods=['POST'])
def predict(report_id):
    try:
        if "username" not in session or session["role"] != "doctor":
            return redirect(url_for("login"))

        lab_reports_collection = mongo.db.lab_reports
        report = lab_reports_collection.find_one({'_id': ObjectId(report_id)})

        if not report or 'values' not in report:

            return redirect(url_for('doctor_dashboard'))

        # Update report status to "Predicted"
        lab_reports_collection.update_one(
            {'_id': ObjectId(report_id)},
            {'$set': {'status': 'Predicted'}}
        )

        # Process values for prediction
        test_values = report['values']
        user_input = [float(test_values[key]) for key in test_values.keys()]

        columns = [
            'baseline value', 'accelerations', 'fetal_movement', 'uterine_contractions',
            'light_decelerations', 'severe_decelerations', 'prolongued_decelerations',
            'abnormal_short_term_variability', 'mean_value_of_short_term_variability',
            'percentage_of_time_with_abnormal_long_term_variability', 'mean_value_of_long_term_variability',
            'histogram_width', 'histogram_min', 'histogram_max', 'histogram_number_of_peaks',
            'histogram_number_of_zeroes', 'histogram_mode', 'histogram_mean', 'histogram_median',
            'histogram_variance', 'histogram_tendency'
        ]

        new_data = pd.DataFrame([user_input], columns=columns)
        new_data_scaled = scaler.transform(new_data)

        prediction = ensemble_model.predict(new_data_scaled)[0]
        predicted_class = prediction + 1
        prediction_label = class_labels.get(predicted_class, "Unknown")

        prediction_probabilities = ensemble_model.predict_proba(new_data_scaled)[0].tolist()

        # SHAP Importance Calculation
        shap_values = loaded_explainer.shap_values(new_data_scaled)
        mean_shap_values = np.abs(np.mean(shap_values, axis=0))
        shap_importance = sorted(zip(columns, mean_shap_values), key=lambda x: x[1], reverse=True)
        top_3_features = shap_importance[:3]

        # Update the database with prediction results
        lab_reports_collection.update_one(
            {'_id': ObjectId(report_id)},
            {'$set': {
                'prediction': prediction_label,
                'probabilities': prediction_probabilities,
                'top_features': top_3_features
            }}
        )

        return render_template("predict_result.html",
                               report_id=report_id,
                               username=report.get('patient_username', 'Unknown'),
                               phone=report.get('patient_phone', 'Unknown'),
                               lab_assistant=report.get('lab_assistant_username', 'Unknown'),
                               prediction=prediction_label,
                               probabilities=prediction_probabilities,
                               top_features=top_3_features)

    except Exception as e:
        return render_template("error.html", error_message=str(e))


@app.route('/delete_report_doctor/<report_id>', methods=['POST'])
def delete_report_doctor(report_id):
    if "username" not in session or session["role"] != "doctor":
        return redirect(url_for("login"))

    lab_reports_collection = mongo.db.lab_reports

    # Update the doctor dashboard without deleting from the database
    lab_reports_collection.update_one(
        {'_id': ObjectId(report_id)},
        {'$set': {'deleted_by_doctor': True}}
    )


    return redirect(url_for("doctor_dashboard"))


@app.route('/add_doctor_message/<report_id>', methods=['POST'])
def add_doctor_message(report_id):
    try:
        message = request.form['doctor_message']
        lab_reports_collection = mongo.db.lab_reports  # Assuming you are using MongoDB
        lab_reports_collection.update_one({'_id': ObjectId(report_id)}, {'$set': {'doctor_message': message}})

        return redirect(url_for('doctor_dashboard'))
    except Exception as e:
        return f"Error in adding doctor's message: {e}"






@app.route("/logout")
def logout():
    session.clear()
    return redirect(url_for("home"))




if __name__ == "__main__":
    app.run(debug=True)

fetalctg.ipynb

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from xgboost import XGBClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix, log_loss
from imblearn.over_sampling import SMOTE
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import VotingClassifier
import shap
from collections import Counter

# Load dataset
data = pd.read_csv('fetal_health.csv')

# Remove duplicate rows
data = data.drop_duplicates()

# Separate features and target
X = data.drop('fetal_health', axis=1)
y = data['fetal_health']

# Check class distribution before applying SMOTE
print("Class Distribution Before SMOTE:\n", y.value_counts())

# Apply SMOTE to balance the dataset
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)
y_resampled = y_resampled.astype(int)

# Check class distribution after applying SMOTE
print("\nClass Distribution After SMOTE:\n", y_resampled.value_counts())

# Visualizing Class Distribution
fig, axes = plt.subplots(1, 2, figsize=(12, 5))

sns.countplot(x=y, ax=axes[0])
axes[0].set_title("Class Distribution Before SMOTE")
axes[0].set_xlabel("Fetal Health Class")
axes[0].set_ylabel("Count")

sns.countplot(x=y_resampled, ax=axes[1])
axes[1].set_title("Class Distribution After SMOTE")
axes[1].set_xlabel("Fetal Health Class")
axes[1].set_ylabel("Count")

plt.tight_layout()
plt.show()



# Fix the labels for XGBoost
y_resampled = y_resampled - 1  # Shift labels from [1, 2, 3] to [0, 1, 2]

# Split data into Train (70%), Validation (15%), and Test (15%)
X_train, X_temp, y_train, y_temp = train_test_split(X_resampled, y_resampled, test_size=0.3, random_state=42, stratify=y_resampled)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42, stratify=y_temp)

# Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)
X_test_scaled = scaler.transform(X_test)

# Model Initialization
xgb = XGBClassifier(n_estimators=200, learning_rate=0.1, max_depth=6, random_state=42)
rf = RandomForestClassifier(n_estimators=200, max_depth=10, random_state=42)
knn = KNeighborsClassifier(n_neighbors=15)
gb = GradientBoostingClassifier(n_estimators=150, learning_rate=0.1, random_state=42)

models = {'XGBoost': xgb, 'Random Forest': rf, 'KNN': knn, 'Gradient Boosting': gb}

# Model Training and Evaluation
for name, model in models.items():
    model.fit(X_train_scaled, y_train)

    train_pred = model.predict(X_train_scaled)
    val_pred = model.predict(X_val_scaled)
    test_pred = model.predict(X_test_scaled)

    train_accuracy = model.score(X_train_scaled, y_train)
    val_accuracy = model.score(X_val_scaled, y_val)
    test_accuracy = model.score(X_test_scaled, y_test)

    train_loss = log_loss(y_train, model.predict_proba(X_train_scaled))
    val_loss = log_loss(y_val, model.predict_proba(X_val_scaled))
    test_loss = log_loss(y_test, model.predict_proba(X_test_scaled))

    print(f"\n{name} Model Performance:")
    print(f"Train Accuracy: {train_accuracy * 100:.2f}%")
    print(f"Validation Accuracy: {val_accuracy * 100:.2f}%")
    print(f"Test Accuracy: {test_accuracy * 100:.2f}%")

    print(f"Train Loss: {train_loss:.4f}")
    print(f"Validation Loss: {val_loss:.4f}")
    print(f"Test Loss: {test_loss:.4f}")

    print(f"\n{name} Classification Report:\n", classification_report(y_test, test_pred))

    sns.heatmap(confusion_matrix(y_test, test_pred), annot=True, fmt='d')
    plt.title(f"Confusion Matrix for {name}")
    plt.show()

# Voting Classifier (Ensemble Model)
ensemble_model = VotingClassifier(estimators=[
    ('xgb', xgb),
    ('rf', rf),
    ('knn', knn),
    ('gb', gb)
], voting='soft')

ensemble_model.fit(X_train_scaled, y_train)

# Predictions
ensemble_train_pred = ensemble_model.predict(X_train_scaled)
ensemble_val_pred = ensemble_model.predict(X_val_scaled)
ensemble_test_pred = ensemble_model.predict(X_test_scaled)

# Accuracy of Ensemble Model
ensemble_train_accuracy = ensemble_model.score(X_train_scaled, y_train)
ensemble_val_accuracy = ensemble_model.score(X_val_scaled, y_val)
ensemble_test_accuracy = ensemble_model.score(X_test_scaled, y_test)

# Loss of Ensemble Model
ensemble_train_loss = log_loss(y_train, ensemble_model.predict_proba(X_train_scaled))
ensemble_val_loss = log_loss(y_val, ensemble_model.predict_proba(X_val_scaled))
ensemble_test_loss = log_loss(y_test, ensemble_model.predict_proba(X_test_scaled))

print("\nEnsemble Model Performance:")
print(f"Train Accuracy: {ensemble_train_accuracy * 100:.2f}%")
print(f"Validation Accuracy: {ensemble_val_accuracy * 100:.2f}%")
print(f"Test Accuracy: {ensemble_test_accuracy * 100:.2f}%")

print(f"Train Loss: {ensemble_train_loss:.4f}")
print(f"Validation Loss: {ensemble_val_loss:.4f}")
print(f"Test Loss: {ensemble_test_loss:.4f}")

print("\nEnsemble Model Report:\n", classification_report(y_test, ensemble_test_pred))

# Predicting on a new data point (single instance)
new_data = pd.DataFrame({
    'baseline value': [133],  # Higher baseline value, could be indicative of a different class
    'accelerations': [0.003],  # Acceleration might be higher for class 2
    'fetal_movement': [0],  # Slightly more fetal movement
    'uterine_contractions': [0.008],  # Uterine contractions might be more frequent for class 2
    'light_decelerations': [0.003],  # Slightly more decelerations
    'severe_decelerations': [0],  # Mild severe deceleration
    'prolongued_decelerations': [0],  # Prolonged decelerations slightly higher
    'abnormal_short_term_variability': [16],  # Short term variability higher
    'mean_value_of_short_term_variability': [2.1],  # Increased mean value
    'percentage_of_time_with_abnormal_long_term_variability': [0],  # More time with abnormal long-term variability
    'mean_value_of_long_term_variability': [13.4],  # Increased mean value for long-term variability
    'histogram_width': [130],  # Wider histogram could indicate different characteristics
    'histogram_min': [68],
    'histogram_max': [198],  # Higher maximum could indicate a different class
    'histogram_number_of_peaks': [5],  # More peaks in the histogram
    'histogram_number_of_zeroes': [1],  # More zeros might correlate with different patterns
    'histogram_mode': [141],  # Mode might be higher
    'histogram_mean': [135],  # Higher mean value
    'histogram_median': [138],  # Higher median
    'histogram_variance': [13],  # More variance
    'histogram_tendency': [0]  # Slightly more tendency
})

# Scale the new data using the same scaler
new_data_scaled = scaler.transform(new_data)

# Use the Ensemble Model to predict the class for the new data
ensemble_predictions = ensemble_model.predict(new_data_scaled)

# Define the mapping for class labels (starting from 1 instead of 0)
class_labels = {1: 'Normal', 2: 'Suspect', 3: 'Pathological'}

# Get the class number and shift back to [1, 2, 3]
predicted_class = ensemble_predictions[0] + 1
predicted_class_name = class_labels[predicted_class]

print(f"New Data Prediction: class {predicted_class} , {predicted_class_name}")

# Print the prediction probabilities
ensemble_probabilities = ensemble_model.predict_proba(new_data_scaled)
print(f"New Data Prediction Probabilities: {ensemble_probabilities[0]}")


# ✅ Compute SHAP values using KernelExplainer for kNN models
shap_values_list = []

for name, model in models.items():
    explainer = shap.KernelExplainer(model.predict, shap.sample(X_train_scaled, 100))
    shap_values = explainer.shap_values(new_data_scaled)
    shap_values_list.append(shap_values)

# ✅ Aggregate SHAP values across models (mean absolute SHAP importance)
mean_shap_values = np.abs(np.mean(shap_values_list, axis=0))[0]
feature_names = new_data.columns

# ✅ Sort and Display Top Features (SHAP)
shap_importance = sorted(zip(feature_names, mean_shap_values), key=lambda x: x[1], reverse=True)

print(f"\n🔍 **SHAP Values for All 21 Features:**")
for feature, value in shap_importance:
    print(f"{feature}: {value:.4f}")

# ✅ Extract Top 3 Features (SHAP)
top_3_features = shap_importance[:3]

print(f"\n🔥 **Top 3 Contributing Features (SHAP) for Ensemble Prediction:**")
for feature, value in top_3_features:
    print(f"{feature}: {value:.4f}")

import pickle

# Save the trained model to a file
with open('fetal_ensemble_model.pkl', 'wb') as model_file:
    pickle.dump(ensemble_model, model_file)

print("Model saved successfully!")

with open("fetal_scaler.pkl", "wb") as scaler_file:
    pickle.dump(scaler, scaler_file)

with open("fetal_shap_explainer.pkl", "wb") as shap_file:
    pickle.dump(explainer, shap_file)





codes after my udayipp vazhiyil output kittyente

about.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>About Us - FetoHealth</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <style>
        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background: #fffefefe;
            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }

        .about-us {
           display: flex;
           justify-content: center;
           align-items: center;
           padding: 60px 10%;
           background-color: #F7F7FF; /* Soft background */
        }

        .about-container {
           display: flex;
           align-items: center;
           max-width: 1200px;
           width: 100%;
        }

        .about-text {
           flex: 1;
           padding-right: 40px;
        }

        .about-text h1 {
           color: #0D0D5C; /* Dark Blue */
           font-size: 2.5rem;

           font-weight: bold;
        }

       .about-text p {
          font-size: 1.2rem;
          color: #333;
          line-height: 1.6;
        }

        .about-image {
           flex: 1;
           text-align: right;
        }

        .about-image img {
           max-width: 100%;
           height: auto;
           border-radius: 10px;
           box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
        }

        .about-text {
           max-width: 600px;  /* Adjust width for better line balance */
           text-align: justify;  /* Justifies text for even spacing */
           line-height: 1.6;  /* Improves readability */
           margin: auto;  /* Centers the text block */
        }
        .about-text h1{
           max-width: 600px;  /* Adjust width for better line balance */
           text-align: center;  /* Justifies text for even spacing */
           line-height: 1.6;  /* Improves readability */
           margin: auto;  /* Centers the text block */
        }


        .our-features {
           text-align: center;
           padding: 50px 0;
           background-color: #F7F7FF; /* Soft background */
        }

        .our-features h1 {
           font-size: 28px;
           color: #000099;
           margin-bottom: 30px;
        }

        /* Feature Boxes */
        .features-container {
            display: flex;
            justify-content: center;
            gap: 20px;
            max-width: 1200px;
            margin: 0 auto;

        }

        .feature-box {
           width: 70%;

           background-color: #e0e0ea;
           padding: 50px;
           border-radius: 8px;
           text-align: center;
           box-shadow: 2px 2px 10px rgba(163, 146, 146, 0.1);
           opacity: 0;
           transform: translateY(20px);
           animation: fadeInUp 1s ease-in-out forwards;
        }

        .feature-box h2 {
           font-size: 24px;
           color: #c4507c;
           margin-bottom: 10px;
        }

        .feature-box p {
           font-size: 18px;
           color: #222121;

        }

        /* Animation */
        @keyframes fadeInUp {
           from {
              opacity: 0;
              transform: translateY(20px);
           }
           to {
             opacity: 1;
             transform: translateY(0);
            }
        }

    </style>
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">FETO</span><span class="health">HEALTH</span>
        </div>
        <div class="header-center">

            <a href="{{ url_for('home') }}">Home</a>
            <a href="{{ url_for('admin_login') }}">Admin</a>

        </div>
        <div class="header-right">

            <a href="{{ url_for('login') }}">Login</a>
            <a href="{{ url_for('register') }}">Sign up</a>

        </div>
    </nav>

    <!-- About Us Section -->
    <section class="about-us">
       <div class="about-container">
          <div class="about-text">
              <h1>ABOUT FETOHEALTH</h1>
              <p>Fetohealth is an platform designed to enhance maternal and fetal health through advanced monitoring and predictive analytics.
              Our technology provides expecting mothers and healthcare professionals with critical insights to ensure a safe and healthy pregnancy.
              With Fetohealth, we bridge the gap between technology and maternal care, offering a smarter, data-driven approach to prenatal health management.
              Whether you're an expecting mother or a medical professional, our platform ensures informed decision-making and early intervention for the best possible outcomes.</p>

            </div>
            <div class="about-image">
               <img src="{{ url_for('static', filename='images/img 60.png') }}" alt="FetoHealth Illustration">
            </div>
        </div>
    </section>


    <section class="our-features">
       <h1>Our Features</h1>
         <div class="features-container">
            <div class="feature-box" style="animation-delay: 0.2s;">
               <h2>Accurate Fetal Health Prediction</h2>
               <p>Using AI and machine learning, FetoHealth delivers precise predictions by analyzing medical data.</p>
            </div>
            <div class="feature-box" style="animation-delay: 0.4s;">
               <h2>Comprehensive Healthcare Management</h2>
               <p>We streamline patient, doctor, and lab assistant interactions for smooth data handling.</p>
            </div>
            <div class="feature-box" style="animation-delay: 0.6s;">
               <h2>Data Security and Integrity</h2>
               <p>FetoHealth prioritizes data privacy, ensuring that patient information is handled securely.</p>
            </div>
            <div class="feature-box" style="animation-delay: 0.8s;">
                <h2>Detailed Report Generation</h2>
                <p>Our platform provides in-depth health reports that can be downloaded in PDF format.</p>
            </div>
        </div>
    </section>

</body>
</html>

admin_dashboard.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>

        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F7F7FF; /* Soft background */

            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(4, 90, 175, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }
        .logout-btn {
            color: #000099 !important; /* Blue color */
            text-decoration: none;
            font-weight: bold;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
        }

        .logout-btn:hover {
            background: #f0f0f0; /* Light gray background on hover */
        }
        .header-center p {
           font-size: 25px; /* Adjust the text size */
           text-align: center;
           font-weight: bold; /* Make the text bold */
           color: #000099; /* Change text color to dark blue */
           text-transform: uppercase; /* Convert text to uppercase */
           letter-spacing: 1px; /* Add spacing between letters */
           margin: 0; /* Remove default margin */
           padding: 10px 20px; /* Add padding */

           border-radius: 8px; /* Rounded corners */

        }


    </style>
    <script>
        function fetchUsers(role) {
            fetch(`/fetch_users/${role}`)
                .then(response => response.json())
                .then(data => {
                    data.sort((a, b) => {
                        const statusOrder = { "pending": 0, "approved": 1, "rejected": 2 };
                        return statusOrder[a.status] - statusOrder[b.status];
                    });

                    let userTable = `
                        <h3 class="text-center mt-3">${role.replace('_', ' ')} Approvals</h3>
                        <table class="table table-bordered table-hover mt-3">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Username</th>
                                    <th>Email</th>
                                    <th>Password</th>
                                    <th>Status</th>
                                    <th>Date</th>
                                    <th>Time</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>`;

                    data.forEach(user => {
                        userTable += `
                            <tr id="user_${user._id}">
                                <td>${user.user_id ? user.user_id : "N/A"}</td>
                                <td>${user.username}</td>
                                <td>${user.email}</td>
                                <td>${user.password}</td>
                                <td id="status_${user._id}" class="fw-bold text-${user.status === 'approved' ? 'success' : user.status === 'rejected' ? 'danger' : 'warning'}">${user.status}</td>
                                <td id="date_${user._id}">${user.updated_date !== "N/A" ? user.updated_date : "N/A"}</td>
                                <td id="time_${user._id}">${user.updated_time !== "N/A" ? user.updated_time : "N/A"}</td>
                                <td>
                                    ${user.status === "pending" ? `
                                        <button class="btn btn-success btn-sm me-1" onclick="updateStatus('${user._id}', 'approved')">Approve</button>
                                        <button class="btn btn-danger btn-sm" onclick="updateStatus('${user._id}', 'rejected')">Reject</button>
                                    ` : ""}
                                    ${user.status === "approved" || user.status === "rejected" ? `
                                        <button class="btn btn-outline-danger btn-sm" onclick="deleteUser('${user._id}', '${user.status}')">Delete</button>
                                    ` : ""}
                                </td>
                            </tr>`;
                    });

                    userTable += `</tbody></table>`;
                    document.getElementById("userList").innerHTML = userTable;
                });
        }

        function updateStatus(userId, status) {
            fetch('/update_status', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId: userId, status: status })
            })
            .then(response => response.json())
            .then(data => {
                if (data.message.includes("successfully")) {
                    document.getElementById(`status_${userId}`).innerText = status;
                    document.getElementById(`status_${userId}`).className = `fw-bold text-${status === 'approved' ? 'success' : 'danger'}`;

                    if (data.updated_at && data.updated_at !== "N/A") {
                        let [date, time] = data.updated_at.split(" ");
                        document.getElementById(`date_${userId}`).innerText = date || "N/A";
                        document.getElementById(`time_${userId}`).innerText = time || "N/A";
                    }

                    let actionCell = document.getElementById(`user_${userId}`).querySelector("td:last-child");
                    actionCell.innerHTML = `<button class="btn btn-outline-danger btn-sm" onclick="deleteUser('${userId}', '${status}')">Delete</button>`;
                }
            })
            .catch(error => console.error("Error:", error));
        }

        function deleteUser(userId, status) {
            if (status === "rejected") {
                fetch('/delete_user', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ userId: userId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.message.includes("deleted")) {
                        document.getElementById(`user_${userId}`).remove();
                    }
                })
                .catch(error => console.error("Error:", error));
            } else {
                document.getElementById(`user_${userId}`).remove();
            }
        }
    </script>
</head>
<body class="bg-light">

    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">FETO</span><span class="health">HEALTH</span>
        </div>
        <div class="header-center">

            <p> Welcome to Admin Dashboard</p>

        </div>
        <div class="header-right">

            <a href="{{ url_for('home') }}" class="logout-btn">Logout</a>



        </div>
    </nav>

    <div class="container mt-4">


        <div class="text-center mt-3">
            <button class="btn btn-primary me-2" onclick="fetchUsers('lab_assistant')">View Lab Assistants</button>
            <button class="btn btn-info" onclick="fetchUsers('doctor')">View Doctors</button>
        </div>

        <div id="userList" class="mt-4"></div>


    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

admin_login.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Login</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>

        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F7F7FF; /* Soft background */

            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }



        .login-container {
            width: 100%;
            max-width: 400px;
            margin: 50px auto;
            padding: 30px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .form-control {
            margin-bottom: 15px;
        }
        .btn-primary {
            width: 100%;
        }
        .flash-messages {
            list-style-type: none;
            padding: 0;
        }
        .flash-messages li {
            background: #ebe8e8;
            color: red;
            padding: 8px;
            margin-top: 5px;
            border-radius: 5px;
        }


        .logout-btn {
            color: #000099 !important; /* Blue color */
            text-decoration: none;
            font-weight: bold;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
        }

        .logout-btn:hover {
            background: #f0f0f0; /* Light gray background on hover */
        }

    </style>
</head>
<body>



    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">FETO</span><span class="health">HEALTH</span>
        </div>
        <div class="header-center">

            <a href="{{ url_for('home') }}">Home</a>
            <a href="{{ url_for('about') }}">About </a>


        </div>
        <div class="header-right">

            <a href="{{ url_for('home') }}" class="logout-btn">Logout</a>



        </div>
    </nav>

    <div class="login-container">
        <h2 class="text-center"> Admin Login</h2>
        <form action="{{ url_for('admin_login') }}" method="POST">
            <div class="mb-3">

                <input type="email" name="email" class="form-control" placeholder="Email" required>

            </div>
            <div class="mb-3">
                <input type="password" name="password" class="form-control" placeholder="Password" required>
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </form>

        {% with messages = get_flashed_messages() %}
            {% if messages %}
                <ul class="flash-messages">
                    {% for message in messages %}
                        <li>{{ message }}</li>
                    {% endfor %}
                </ul>
            {% endif %}
        {% endwith %}
    </div>



    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>



</body>
</html>

doctor_dashboard.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Doctor Dashboard</title>
    <style>

        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F7F7FF;

            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }
        .header-center p {
           font-size: 25px; /* Adjust the text size */
           text-align: center;
           font-weight: bold; /* Make the text bold */
           color: #000099; /* Change text color to dark blue */
           text-transform: uppercase; /* Convert text to uppercase */
           letter-spacing: 1px; /* Add spacing between letters */
           margin: 0; /* Remove default margin */
           padding: 10px 20px; /* Add padding */

           border-radius: 8px; /* Rounded corners */

        }




        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
            width: 90%;
            margin: 60px auto;

        }

        h1 {
           color: #333;
        }

        /* Move Sorting Outside Table */
        .sort-container {
            margin-top: 20px;
            margin-bottom: 5px;
            text-align: left;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 8px;
            width: fit-content;
        }

        /* Table Styles */
        table {
           width: 100%;
           background: #fff;
           border-collapse: collapse;
           border: 2px solid black; /* Ensuring columns are separated */
        }

        /* Table Headers */
        .table-header {

           background-color: #8c75ac;
           color: white;
           font-weight: bold;
        }

        /* Table Cells */
        th, td {
           text-align: center;
           padding: 12px;
           border: 1px solid black; /* Black column separation */
        }



        /* Buttons */
        .btn {
           padding: 6px 12px;
           border-radius: 5px;
           font-size: 14px;
           text-decoration: none;
        }
        .btn-info {
           background-color: #388c99;
           color: white;
        }
        .btn-warning {
           background-color: #f63962;
           color: white;
        }
        .btn-danger {
           background-color: #e3150e;
           color: white;
        }

        /* Status Colors */
        .status {
           font-weight: bold;
           padding: 8px;
           border-radius: 5px;
           text-align: center;
           background: none;
        }
        .status-pending {
           color: #f4b109; /* Yellow */

        }
        .status-predicted {
            color: #28a745; /* Green */
        }

    </style>
    <script>
        function updateSort() {
            const sortValue = document.getElementById("sortDropdown").value;
            window.location.href = "{{ url_for('doctor_dashboard') }}?sort=" + sortValue;
        }
    </script>
</head>
<body>


<!-- Navigation Bar -->
<nav class="header">
    <div class="header-left">
        <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
        <span class="feto">FETO</span><span class="health">HEALTH</span>
    </div>
    <div class="header-center">

        <p>  Doctor Dashboard</p>

    </div>
    <div class="header-right">


        <a href="{{ url_for('home') }}" class="logout-btn">Logout</a>


    </div>
</nav>


<div class="container mt-4">
 <div class="sort-container">
    <label for="sortDropdown">Sort By:</label>
    <select id="sortDropdown" class="form-select w-auto" onchange="updateSort()">
        <option value="new_to_old" {% if selected_sort == 'new_to_old' %}selected{% endif %}>New to Old</option>
        <option value="old_to_new" {% if selected_sort == 'old_to_new' %}selected{% endif %}>Old to New</option>
        <option value="pending" {% if selected_sort == 'pending' %}selected{% endif %}>Pending</option>
        <option value="predicted" {% if selected_sort == 'predicted' %}selected{% endif %}>Predicted</option>
    </select>
</div>

<!-- Table Container -->

    <table class="table">
        <thead>
            <tr class="table-header"> <!-- Added class to change color -->
                <th>Patient Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Lab Assistant</th>
                <th>Values</th>
                <th>Date</th>
                <th>Time</th>
                <th>Status</th>
                <th>Prediction</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            {% for report in reports %}
            {% if not report.deleted_by_doctor %}
            <tr>
                <td>{{ report.patient_username }}</td>
                <td>{{ report.patient_email }}</td>
                <td>{{ report.patient_phone }}</td>
                <td>{{ report.lab_assistant_username }}</td>
                <td>
                    <a href="{{ url_for('view_values', report_id=report._id) }}" class="btn btn-info btn-sm">View Values</a>
                </td>
                <td>{{ report.date }}</td>
                <td>{{ report.time }}</td>

                <!-- Status Column with Colors -->
                <td class="status
                    {% if report.status == 'Pending' %} status-pending
                    {% elif report.status == 'Predicted' %} status-predicted {% endif %}">
                    {{ report.status }}
                </td>

                <!-- Predict Column -->
                <td>

                    <form action="{{ url_for('predict', report_id=report._id) }}" method="POST">
                        <button type="submit" class="btn btn-warning btn-sm">Predict</button>
                    </form>

                </td>

                <!-- Delete Column -->
                <td>
                    <form action="{{ url_for('delete_report_doctor', report_id=report._id) }}" method="POST">
                        <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                    </form>
                </td>
            </tr>
            {% endif %}
            {% endfor %}
        </tbody>
    </table>
</div>


</body>
</html>

enter_values.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enter Values</title>
    <style>
        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F7F7FF;

            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }
        .header-center p {
           font-size: 25px; /* Adjust the text size */
           text-align: center;
           font-weight: bold; /* Make the text bold */
           color: #000099; /* Change text color to dark blue */
           text-transform: uppercase; /* Convert text to uppercase */
           letter-spacing: 1px; /* Add spacing between letters */
           margin: 0; /* Remove default margin */
           padding: 10px 20px; /* Add padding */

           border-radius: 8px; /* Rounded corners */

        }
        .form-container {
           max-width: 600px;
           margin: 50px auto;
           background: white;
           padding: 30px;
           border-radius: 10px;
           box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        }

        h1 {
           text-align: center;
           color: #6617b5;
           font-weight: bold;
           margin-bottom: 20px;
        }

        /* Table-like structure */
        .form-group {
           display: flex;
           align-items: center;
           margin-bottom: 10px;
        }

        .form-group label {
            flex: 1;
            font-weight: bold;
            text-align: right;
            padding-right: 25px;
        }

        .form-group input {
            flex: 2;
            width: 50%;
            padding: 17px;
            border: 1px solid #ddd;
            border-radius: 5px;
            text-align: center;
        }

        .form-group input:focus {
            border-color: #6617b5;
            box-shadow: 0px 0px 5px rgba(102, 23, 181, 0.5);
            outline: none;
        }

        .btn-submit {
            width: 100%;
            padding: 12px;
            background: #6617b5;
            color: white;
            font-weight: bold;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: 0.3s;
        }

        .btn-submit:hover {
            background: #530d98;
        }

    </style>
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">FETO</span><span class="health">HEALTH</span>
        </div>
        <div class="header-center">

            <p>  Test Values </p>

        </div>
        <div class="header-right">

            <a href="{{ url_for('lab_assistant_dashboard') }}">Go Back</a>



        </div>
    </nav>


    <div class="form-container">
        <h1>Enter test values for {{ patient.patient_username }}</h1>
        <form method="POST">
            {% for field in [
                'baseline_value', 'accelerations', 'fetal_movement', 'uterine_contractions',
                'light_decelerations', 'severe_decelerations', 'prolongued_decelerations',
                'abnormal_short_term_variability', 'mean_value_of_short_term_variability',
                'percentage_of_time_with_abnormal_long_term_variability', 'mean_value_of_long_term_variability',
                'histogram_width', 'histogram_min', 'histogram_max', 'histogram_number_of_peaks',
                'histogram_number_of_zeroes', 'histogram_mode', 'histogram_mean', 'histogram_median',
                'histogram_variance', 'histogram_tendency'
            ] %}
            <div class="form-group">
                <label for="{{ field }}">{{ field.replace('_', ' ').title() }}</label>
                <input type="text" name="{{ field }}" required>
            </div>
            {% endfor %}
            <button type="submit" class="btn-submit">Ask to Doctor</button>
        </form>
    </div>


</body>
</html>

error.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Error</title>
</head>
<body>
    <h2>An error occurred</h2>
    <p>{{ error_message }}</p>
    <a href="/">Go Back</a>
</body>
</html>

home.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home - Fetal Status Prediction System</title>
    <style>
        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background: #fffefefe;
            color: #333;
            text-align: center;
        }

        /* Section Styling */
        section {
            padding: 50px;
            border-bottom: 1px solid #ddd;
            position: relative;
        }

        /* Header Section */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 20px;
            background: #fffefefe;

            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 1px;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
        }


        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           letter-spacing: 0; /* Ensures no extra space */
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple color for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Orange color for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;
        }
        .header-left {
           word-spacing: -0.5px; /* Adjust if needed */
        }

        .header-center,
        .header-right {
            display: flex;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;

            color: #000099;
            padding: 10px 20px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }
            /* Image Slider */
        .image-slider {
            position: relative;
            height: 400px;
            overflow: hidden;
        }

        .image-slider img {
           width: 100%;
           height: 150%;
           object-fit: cover;
           position: absolute;
           top: 0;
           left: 0;
           opacity: 0;
           transition: opacity 1s ease-in-out;
        }

        .image-slider img.active {
           opacity: 1;
        }

        /* Overlay Text - Left Alignment */
        .overlay-text {
           position: absolute;
           top: 30%;
           left: 2%; /* Moves text to the left side */
           transform: translateY(-50%); /* Only adjust vertically */

           color: #0D0D5C;
           text-align: left;
           padding: 20px 40px;
        }

        .overlay-text h1 {
           font-size: 2.5rem;
           margin-bottom: 10px;
           font-weight: bold;
           font-style: italic;
           color: #0D0D5C;

        }

        .overlay-text p {
            font-size: 1.2rem;

            font-style: oblique;
            color: #6565cc;

        }
        .get-started-btn {
            display: inline-block;
            margin-top: 10px;
            padding: 10px 20px;
            font-size: 1.2rem;
            color: white;
            background: rgb(122, 103, 201);
            border: none;
            border-radius: 7px;
            text-decoration: none;
            font-weight: bold;
            transition: 0.3s ease-in-out;
        }

        .get-started-btn:hover {
            background: rgb(124, 170, 207);
        }

        /* Partitioned Box */
        .partitioned-box {
            position: relative;
            margin: -100px auto 0;
            background: rgba(255, 255, 255, 0.9);
            padding: 2px;
            border-radius: 10px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            width: 50%;
            max-width: 1100px;
            display: flex;
            gap: 0;
            z-index: 10;
            transition: transform 0.5s ease, box-shadow 0.5s ease;
        }

        .partitioned-box:hover {
            transform: translateY(-20px);
            box-shadow: 0px 12px 18px rgba(0, 0, 0, 0.3);
        }

        .partition {
            flex: 1;
            text-align: center;
            padding: 10px;
            position: relative;
        }

        .partition:not(:last-child)::after {
            content: '';
            position: absolute;
            top: 10px;
            right: 0;
            height: calc(100% - 5px);
            width: 1px;
            background: #000;
        }

        .partition h3 {
            font-size: 1.2rem;
            color: #007BFF;
            margin-bottom: 10px;
        }

        .partition p {
            font-size: 1.4rem;
            color: #080808;


        }

        .partition img {
            width: 80px;
            height: 80px;
            display: block;
            margin: 0 auto 10px;
        }



        .why-fetohealth {
            text-align: center;
            font-size: 25px;
            padding: 40px;
        }
        .why-fetohealth h1 {
            text-align: center;

            color: #000099;
            padding: 10px;
        }
        .why-fetohealth p {
            text-align: justify; /* Aligns text evenly for a clean look */
            font-size: 20px;
            font-style: normal;
            font-weight: 400; /* Adds slight thickness for readability */
            color: #080808; /* Slightly darker shade for contrast */
            line-height: 2; /* Improves readability with better spacing */
            padding: 20px; /* Adds more padding for better separation */
            max-width: 1300px; /* Restricts width for better readability */
            margin: 0 auto; /* Centers the paragraph */
            background: rgba(255, 255, 255, 0.8); /* Adds a subtle background effect */
            border-radius: 10px; /* Rounds the edges for a smooth look */
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1); /* Light shadow for a floating effect */
        }


        .features-container {
            display: grid;
            grid-template-columns: repeat(2, 1fr); /* Creates two equal columns */
            gap: 20px; /* Adds space between boxes */
            margin-top: 20px;
            justify-items: center;
            width: 100%;

        }

        .feature-box {
            width: 85%;

            background-color: #f4f4f4;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 2px 2px 10px rgba(163, 146, 146, 0.1);
            opacity: 0;
            transform: translateY(20px);
            animation: fadeInUp 1s ease-in-out forwards;

        }

        .feature-box h2 {
            font-size: 22px;
            font-style: normal;
            color: #ef5690;
            margin-bottom: 10px;
        }

        .feature-box p {
            font-size: 20px;
            font-style: normal;
            color: #222121;
            font-size: 17px;
        }

        /* Animation */
        @keyframes fadeInUp {
           from {
              opacity: 0;
              transform: translateY(20px);
            }
            to {
              opacity: 1;
              transform: translateY(0);
            }
        }

        .what-we-do {
            text-align: center;
            padding: 50px;
            background: white;
            color: #000099;
            font-size: 20px;

        }
        .slider-container {
            position: relative;
            width: 100%;
            max-width: 100%;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .slider-wrapper {
            width: 70%;
            overflow: hidden;
        }

        .slider {
            display: flex;
            transition: transform 1.8s ease-in-out;
            width: 100%; /* Ensures all slides fit horizontally */
        }

        .slide {
            width: 100%;
            flex: 0 0 100%;
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .slide img {
            max-width: 20%;
            height: auto;
            object-fit: contain;
        }

        .prev, .next {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            border: none;
            padding: 10px 15px;
            cursor: pointer;
            font-size: 24px;
        }

        .prev {
            left: 10px;
        }

        .next {
            right: 10px;
        }

        .logo-1 {
           width: 3000px;
           height: 3000px;

        }


        .logo-2 {
            width: 3000px;
            height: 3000px;
        }

        .logo-3 {
            width: 150px;
            height: 250px;
        }

        .logo-4 {
           width: 3000px;
           height: 3000px;
        }

        .logo-5 {
           width: 300px;
           height: 300px;

        }

        .slide p {
           font-size: 24px; /* Adjust the size as needed */
           font-weight: bold; /* Makes the text more readable */
           color: #c13b6e;

           text-align: center; /* Ensures the text is centered under the image */
           margin-top: 10px; /* Adds spacing between the image and text */
        }



    </style>
</head>
<body>

    <section class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">FETO</span><span class="health">HEALTH</span>

        </div>
        <div class="header-center">
            <a href="{{ url_for('home') }}">Home</a>
            <a href="{{ url_for('about') }}">About </a>
            <a href="{{ url_for('admin_login') }}">Admin</a>
        </div>
        <div class="header-right">
            <a href="{{ url_for('login') }}">Login</a>
            <a href="{{ url_for('register') }}">Sign up</a>
        </div>
    </section>



    <section class="image-slider">
        <img src="{{ url_for('static', filename='images/img101.png') }}" alt="Banner" class="active">
        <div class="overlay-text">
            <h1>WELCOME TO FETOHEALTH</h1>
            <p>Your Trusted Partner in Fetal Health Prediction</p>
            <a href="{{ url_for('register') }}" class="get-started-btn">Get Started</a>
        </div>
    </section>



    <div class="partitioned-box">
        <div class="partition">
            <img src="{{ url_for('static', filename='images/logo 10.png') }}" alt="Logo">
            <p>SHAP Health Insights</p>
        </div>
        <div class="partition">
            <img src="{{ url_for('static', filename='images/logo 12.png') }}" alt="Logo">
            <p>Secure Data Handling</p>
        </div>
        <div class="partition">
            <img src="{{ url_for('static', filename='images/logo 13.png') }}" alt="Logo">
            <p> Reports with Remarks</p>
        </div>
    </div>
    <section class="why-fetohealth">
        <h1>Why FETOHEALTH</h1>

        <p>Fetohealth is an AI-driven platform designed to ensure the well-being of the fetus. By integrating cutting-edge technology with healthcare, we provide reliable insights and real-time monitoring for fetal health assessment. Our advanced algorithms analyze vital health parameters, offering early warnings about potential risks and complications. This proactive approach allows healthcare professionals to take timely action, ensuring better maternal and fetal outcomes..</p>
                   <p>Our system supports medical professionals with data-driven predictions, helping them detect potential complications at an early stage. With a focus on accuracy, security, and accessibility, FetoHealth enhances maternal care through seamless digital solutions. By leveraging AI-powered diagnostics, we enable continuous remote monitoring, reducing the need for frequent hospital visits while still ensuring comprehensive care. Furthermore, our platform fosters better patient-doctor communication, empowering expectant mothers with personalized health insights and fostering a sense of confidence and reassurance throughout pregnancy..</p>

        <div class="features-container">
            <div class="feature-box" style="animation-delay: 2s;">
                <h2>Accurate Fetal Health Prediction</h2>
                <p>Using AI and machine learning, FetoHealth delivers precise predictions by analyzing medical data, assisting doctors in early diagnosis and preventive care.</p>
            </div>
            <div class="feature-box" style="animation-delay: 2.5s;">
                <h2>Comprehensive Healthcare Management</h2>
                <p>We streamline patient, doctor, and lab assistant interactions, ensuring smooth data handling and efficient management within the healthcare ecosystem.</p>
            </div>
            <div class="feature-box" style="animation-delay: 3s;">
                <h2>Data Security and Integrity</h2>
                <p>FetoHealth prioritizes data privacy,ensuring that patient information is handled securely and confidentially.</p>
            </div>
            <div class="feature-box" style="animation-delay: 3.5s;">
                <h2>Detailed Report Generation</h2>
                <p>Our platform provides in-depth health reports that can be downloaded in PDF format, allowing patients easy access to critical information.</p>
            </div>
        </div>
    </section>


    <section class="what-we-do">
        <h1>What We Do</h1>
        <div class="slider-container">
            <button class="prev" onclick="moveSlide(-1)">&#10094;</button>
            <div class="slider-wrapper">
                <div class="slider">
                    <div class="slide">

                        <img class="logo-1" src="{{ url_for('static', filename='images/logo 20.png') }}" alt="Logo 1">

                        <p>Patient Authentication</p>
                    </div>
                    <div class="slide">
                        <img class="logo-2" src="{{ url_for('static', filename='images/logo 21.png') }}" alt="Logo 1">

                        <p>Admin-Approved Access</p>
                    </div>
                    <div class="slide">
                        <img class="logo-3" src="{{ url_for('static', filename='images/logo 22.png') }}" alt="Logo 1">

                        <p>Lab Assistant Data Entry</p>
                    </div>
                    <div class="slide">
                        <img class="logo-4" src="{{ url_for('static', filename='images/logo 23.png') }}" alt="Logo 1">

                        <p>Doctor's Diagnosis</p>
                    </div>
                    <div class="slide">
                        <img class="logo-5" src="{{ url_for('static', filename='images/logo 24.png') }}" alt="Logo 1">

                        <p>Report Download</p>
                    </div>
                </div>
            </div>
            <button class="next" onclick="moveSlide(1)">&#10095;</button>
        </div>
    </section>
    <script>
        let currentIndex = 0;

        function moveSlide(direction) {
            const slides = document.querySelector(".slider");
            const totalSlides = document.querySelectorAll(".slide").length;

            currentIndex += direction;
            if (currentIndex < 0) {
                currentIndex = totalSlides - 1;
            } else if (currentIndex >= totalSlides) {
                currentIndex = 0;
            }

            slides.style.transform = `translateX(-${currentIndex * 100}%)`;
        }
    </script>

</body>
</html>

lab_assistant_dashboard.html

<!DOCTYPE html>
<html lang="en">
<head>
    <style>

        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F7F7FF;

            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }
        .header-center p {
           font-size: 25px; /* Adjust the text size */
           text-align: center;
           font-weight: bold; /* Make the text bold */
           color: #000099; /* Change text color to dark blue */
           text-transform: uppercase; /* Convert text to uppercase */
           letter-spacing: 1px; /* Add spacing between letters */
           margin: 0; /* Remove default margin */
           padding: 10px 20px; /* Add padding */

           border-radius: 8px; /* Rounded corners */

        }

        .container {
            max-width: 90%;
            margin: 60px auto;

            background: #fff;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        }



        /* Dropdown styling */
        select {
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ddd;
            cursor: pointer;
        }

        table {
            width: 100%;
            background: #fff;
            border-collapse: collapse;
        }

        th, td {
            text-align: center;
            padding: 12px;
            border-bottom: 1px solid #e6e0e0;
            border: 1px solid black;

        }

        th {
            background-color: #8c75ac;

            color: white;
        }

        tbody tr:hover {
            background: #f1f1f1;
        }

        .hidden {
            display: none;
        }

        .custom-btn {
            text-decoration: none;  /* Removes underline */
            color: white;           /* White text */
            background-color: #388c99;; /* Purple for primary button */
            padding: 8px 12px;      /* Adjust padding */
            border-radius: 5px;     /* Rounded corners */
            border: none;           /* Removes default border */
            display: inline-block;  /* Makes <a> look like a button */
            font-weight: bold;      /* Bold text */
            text-align: center;
            cursor: pointer;
            transition: 0.3s;
        }

        .custom-btn:hover {
            background-color: #855bae; /* Darker shade on hover */
        }

        .btn-danger {
            background-color: #d43e4a; /* Red for delete button */
        }

        .btn-danger:hover {
            background-color: #dc4d5d; /* Darker red on hover */
        }



        /* Remove black border on focus */
        #sortDropdown:focus {
            outline: none !important; /* Removes the default focus outline */
            box-shadow: none !important; /* Removes Bootstrap's default focus effect */
            border: 1px solid #ddd !important; /* Optional: Keep a subtle border */
        }

        .status-pending {
           color: #efad06; /* Yellowish color */
           font-weight: bold;
           font-size: 17px;
        }

        .status-predicted {
           color: #28a745; /* Green color */
           font-weight: bold;
        }



    </style>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lab Assistant Dashboard</title>
    <style>
        .hidden { display: none; }  /* Hides specific columns */
    </style>
    <script>
        function updateSort() {
            const sortValue = document.getElementById("sortDropdown").value;
            window.location.href = "{{ url_for('lab_assistant_dashboard') }}?sort=" + sortValue;
        }
    </script>
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">FETO</span><span class="health">HEALTH</span>
        </div>
        <div class="header-center">

            <p>  Lab Assistant Dashboard</p>

        </div>
        <div class="header-right">


            <a href="{{ url_for('home') }}" class="logout-btn">Logout</a>


        </div>
    </nav>


    <div class="container mt-4">

        <!-- Sorting Dropdown -->

        <div class="mb-3" style="text-align: left; margin-bottom: 15px;">

            <label for="sortDropdown" class="me-2">Sort By:</label>
            <select id="sortDropdown" class="form-select w-auto" onchange="updateSort()">
                <option value="new_to_old" {% if selected_sort == 'new_to_old' %}selected{% endif %}>New to Old</option>
                <option value="old_to_new" {% if selected_sort == 'old_to_new' %}selected{% endif %}>Old to New</option>
                <option value="pending" {% if selected_sort == 'pending' %}selected{% endif %}>Pending</option>
                <option value="predicted" {% if selected_sort == 'predicted' %}selected{% endif %}>Predicted</option>
            </select>
        </div>

        <!-- Reports Table -->
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Patient Username</th>
                    <th>Patient Email</th>
                    <th>Patient Phone</th>
                    <th class="hidden">Lab Assistant Name</th>
                    <th>Date</th>
                    <th>Time</th>
                    <th>Values</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>

            <tbody>
                {% for report in reports %}
                <tr>
                    <td>{{ report.patient_username }}</td>
                    <td>{{ report.patient_email }}</td>
                    <td>{{ report.patient_phone }}</td>
                    <td class="hidden">{{ report.lab_assistant_username }}</td>
                    <td>{{ report.date }}</td>
                    <td>{{ report.time }}</td>
                    <td>
                        <a href="{{ url_for('enter_values', report_id=report._id) }}" class="btn btn-primary btn-sm custom-btn">
                            Enter Your Values
                        </a>
                    </td>

                    <td class="{% if report.status == 'Pending' %}status-pending{% endif %}">{{ report.status }}</td>


                    <td>

                        <form action="{{ url_for('delete_report', report_id=report._id) }}" method="POST" style="display:inline;">
                            <button type="submit" class="btn btn-danger btn-sm custom-btn">Delete</button>
                        </form>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>

    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

</body>
</html>

login.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Fetal Health Prediction</title>
    <style>
         body {
            font-family: Arial, sans-serif;
            background-color: #F7F7FF;
            display: flex;
            flex-direction: column; /* Stack navbar and container */
            align-items: center;
            height: 100vh;
            margin: 0;
        }


        /* Navbar Styling */
        .header {
           display: flex;
           justify-content: space-between;
           align-items: center;
           padding: 20px 12px;
           background: #fffefefe;
           box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
           width: 100%; /* Ensures full width */
           position: fixed; /* Fixes navbar at the top */
           top: 0;
           left: 0;
           z-index: 1000; /* Ensures it stays on top */
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 20px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }


        /* Centering Login Container */
        .login-container {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            text-align: center;
            width: 350px;
            margin-top: 100px; /* Space below navbar */
        }




        h2 {
            color: #1976D2;
        }

        .input-group {
            margin-bottom: 15px;
            text-align: left;
        }

        label {
            display: block;
            font-weight: bold;
            margin-bottom: 5px;
        }

        input, select {
            width: 100%;
            padding: 10px;
            margin-top: 5px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        button {
            width: 100%;
            background: #1976D2;
            color: white;
            border: none;
            padding: 10px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 10px;
        }

        button:hover {
            background: #1565C0;
        }

        .message {
            margin-top: 10px;
            font-size: 14px;
        }

        .message a {
            color: #1976D2;
            text-decoration: none;
        }

        .message a:hover {
            text-decoration: underline;
        }

        .flash-messages {
            margin-bottom: 15px;
            padding: 10px;
            border-radius: 5px;
            text-align: center;
        }

        .flash-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .flash-error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
    </style>
    <script>
        function showAdditionalFields() {
            var role = document.getElementById("role").value;
            document.getElementById("lab_id").style.display = "none";
            document.getElementById("doctor_id").style.display = "none";

            if (role === "lab_assistant") {
                document.getElementById("lab_id").style.display = "block";
            } else if (role === "doctor") {
                document.getElementById("doctor_id").style.display = "block";
            }
        }
    </script>
</head>
<body>

    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">FETO</span><span class="health">HEALTH</span>
        </div>
        <div class="header-center">

            <a href="{{ url_for('home') }}">Home</a>
            <a href="{{ url_for('about') }}">About </a>


        </div>
        <div class="header-right">

            <a href="{{ url_for('home') }}" class="logout-btn">Logout</a>



        </div>
    </nav>


    <div class="login-container">
        <h2>USER LOGIN</h2>

        <!-- Flash Messages -->
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <p class="flash-messages flash-{{ category }}">{{ message }}</p>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <form method="POST" action="{{ url_for('login') }}">

            <div class="input-group">
                <label for="role">Select Role</label>
                <select id="role" name="role" required onchange="showAdditionalFields()">
                    <option value="" disabled selected>-- Select Role --</option>
                    <option value="patient">Patient</option>
                    <option value="doctor">Doctor</option>
                    <option value="lab_assistant">Lab Assistant</option>
                </select>
            </div>

            <div class="input-group">
                <label for="email">Email</label>
                <input type="email" id="email" name="email" required>
            </div>

            <div class="input-group">
                <label for="password">Password</label>
                <input type="password" id="password" name="password" required>
            </div>

            <div class="input-group" id="lab_id" style="display: none;">
                <label for="lab_assistant_id">Lab Assistant ID</label>
                <input type="text" id="lab_assistant_id" name="lab_assistant_id">
            </div>

            <div class="input-group" id="doctor_id" style="display: none;">
                <label for="doctor_id">Doctor ID</label>
                <input type="text" id="doctor_id" name="doctor_id">
            </div>

            <button type="submit">Login</button>

            <div class="message">
                Don't have an account? <a href="{{ url_for('register') }}">Sign Up</a>
            </div>
        </form>
    </div>




</body>
</html>

patient_dashboard.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Dashboard</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <style>
        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F7F7FF;

            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }



          .container {
            max-width: 800px;
            background: #ffffff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

        h2 {
           font-weight: bold;
           color: #2c3e50;
        }

        .card {
           border: 1px solid #ddd;
           border-radius: 10px;
           box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        }

        .card-title {
           font-weight: bold;
           color: #3498db;
        }

        .list-group-item {
            background-color: #f4f6f7;
            border: none;
            border-radius: 5px;
            margin-bottom: 5px;
        }

        .alert-warning {
           font-weight: bold;
        }

        .btn-primary {
           background-color: #007bff;
           border: none;
           border-radius: 5px;
           padding: 10px 20px;
           font-size: 16px;
           font-weight: bold;
        }

        .btn-primary:hover {
            background-color: #0056b3;
        }

        .text-center {
           text-align: center;
        }

        p {
           font-size: 19px;
        }

    </style>

</head>
<body>

    <!-- Navigation Bar -->
    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">FETO</span><span class="health">HEALTH</span>
        </div>
        <div class="header-center">

            <a href="{{ url_for('home') }}">Home</a>
            <a href="{{ url_for('about') }}">About </a>

        </div>
        <div class="header-right">


            <a href="{{ url_for('home') }}" class="logout-btn">Logout</a>



        </div>
    </nav>

    <div class="container mt-4">
        <h2 class="text-center">Welcome {{ username }}</h2>

        {% if lab_report %}
        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Prediction Result</h5>
                <p><strong>Fetal Health Condition:</strong> {{ lab_report.prediction }}</p>

            </div>
        </div>



        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Doctor Remark </h5>
                <p>{{ lab_report.doctor_message }}</p>
            </div>
        </div>
        {% else %}
        <p class="alert alert-warning mt-4">No prediction report available yet.</p>
        {% endif %}

        <div class="text-center mt-4">
            <a href="{{ url_for('download_report') }}" class="btn btn-primary">Download Report</a>

        </div>



    </div>
</body>
</html>

predict_result.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Prediction Result</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <style>
        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F7F7FF;

            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }
        .header-center p {
           font-size: 25px; /* Adjust the text size */
           text-align: center;
           font-weight: bold; /* Make the text bold */
           color: #000099; /* Change text color to dark blue */
           text-transform: uppercase; /* Convert text to uppercase */
           letter-spacing: 1px; /* Add spacing between letters */
           margin: 0; /* Remove default margin */
           padding: 5px 10px; /* Add padding */

           border-radius: 8px; /* Rounded corners */

        }



        .container {
           max-width: 1000px;
           background: #ffffff;
           padding: 20px;
           border-radius: 10px;
           box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

        /* Header */
        h2 {
           font-size: 28px;
           font-weight: bold;
           color: #007bff;
        }

        /* Card Styling */
        .card {
            border-radius: 8px;
            box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
        }

        .card-title {
            font-size: 24px;
            font-weight: bold;
            color: #333;
        }

        .card-body p {
            font-size: 18px;
            color: #555;
        }

        /* Alert Styling */
        .alert-info {
            background-color: #d1ecf1;
            color: #0c5460;
            font-size: 18px;
            font-weight: bold;
            border-radius: 8px;
        }

        /* List Group */
        .list-group-item {
           font-size: 17.5px;
           border-radius: 5px;
        }

        /* Button Styling */
        .btn-primary {
            background-color: #007bff;
            border: none;
            padding: 8px 15px;
            font-size: 14px;
            border-radius: 5px;
            transition: transform 0.2s, background-color 0.3s;
        }

        .btn-primary:hover {
            background-color: #0056b3;
            transform: scale(1.05);
        }

        /* Textarea */
        textarea {
           border-radius: 5px;
           border: 1px solid #ccc;
           padding: 10px;
           font-size: 14px;
           resize: none;
        }

        textarea:focus {
           border-color: #007bff;
           outline: none;
           box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        }



    </style>
</head>


    <!-- Navigation Bar -->
    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">FETO</span><span class="health">HEALTH</span>
        </div>
        <div class="header-center">
            <div class="header-center">

                <p> Result</p>

            </div>
        </div>
        <div class="header-right">

            <a href="{{ url_for('doctor_dashboard') }}">Go Back</a>




        </div>
    </nav>

    <body class="bg-light">
        <div class="container mt-5">
            <div class="text-center">
                <h2 class="mb-4">Prediction Result</h2>

                <!-- Patient Details -->
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Patient Details:</h5>
                        <p><strong>Username:</strong> {{ username }}</p>
                        <p><strong>Phone Number:</strong> {{ phone }}</p>
                    </div>
                </div>

                <!-- Prediction Outcome -->
                <div class="alert alert-info">
                    <h4>The predicted fetal health condition is: <strong>{{ prediction }}</strong></h4>
                </div>

                <!-- Prediction Confidence -->
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Prediction Confidence:</h5>
                        <ul class="list-group">
                            <li class="list-group-item">Normal: {{ probabilities[0] | round(3) }}</li>
                            <li class="list-group-item">Suspect: {{ probabilities[1] | round(3) }}</li>
                            <li class="list-group-item">Pathological: {{ probabilities[2] | round(3) }}</li>
                        </ul>
                    </div>
                </div>

                <!-- SHAP Feature Importance Graph (All Features) -->
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">SHAP Feature Importance (All Features):</h5>
                        <img src="{{ url_for('static', filename='shap_all_features.png') }}" alt="SHAP Feature Importance (All Features)" class="img-fluid">
                    </div>
                </div>

                <!-- SHAP Feature Importance Graph (Top 3 Features) -->
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Top 3 SHAP Feature Importance:</h5>
                        <img src="{{ url_for('static', filename='shap_top3_features.png') }}" alt="Top 3 SHAP Feature Importance" class="img-fluid">
                    </div>
                </div>

                <!-- Top Influencing Features -->
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Top 3 Influencing Features:</h5>
                        <ul class="list-group">
                            {% for feature, importance in top_features %}
                                <li class="list-group-item">
                                    <strong>{{ feature }}</strong>: {{ importance | round(3) }}
                                </li>
                            {% endfor %}
                        </ul>
                    </div>
                </div>

                <!-- Feature Explanations -->
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Feature Explanations:</h5>
                        <ul class="list-group">
                            {% for explanation in explanation_text %}
                                <li class="list-group-item">{{ explanation }}</li>
                            {% endfor %}
                        </ul>
                    </div>
                </div>

                <!-- Overall Explanation -->
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Overall Interpretation:</h5>
                        <p>{{ overall_interpretation }}</p>
                    </div>
                </div>

                <!-- Doctor's Message Form -->
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Doctor's Remark:</h5>
                        <form action="{{ url_for('add_doctor_message', report_id=report_id) }}" method="POST">
                            <textarea name="doctor_message" class="form-control" rows="3" placeholder="Type your message here..." required></textarea>
                            <button type="submit" class="btn btn-primary mt-3">Submit Message</button>
                        </form>
                    </div>
                </div>

            </div>
        </div>
    </body>
    </html>

register.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .hidden { display: none; }
        .error { color: red; font-size: 14px; }
        .message { color: #28262b; font-weight: bold; }

        .container { max-width: 500px; margin-top: 50px; }

        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F7F7FF; /* Soft background */

            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }
        .message a {
            text-decoration: none;
            color: #896ca6;

        }



    </style>
</head>
<body>

    <nav class="header">
        <div class="header-left">
            <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
            <span class="feto">FETO</span><span class="health">HEALTH</span>
        </div>
        <div class="header-center">

            <a href="{{ url_for('home') }}">Home</a>
            <a href="{{ url_for('about') }}">About </a>


        </div>
        <div class="header-right">

            <a href="{{ url_for('home') }}" class="logout-btn">Logout</a>



        </div>
    </nav>

    <div class="container">
        <div class="card shadow p-4">
            <h3 class="text-center mb-3"> USER REGISTER</h3>
            {% with messages = get_flashed_messages(with_categories=true) %}
                {% if messages %}
                    {% for category, message in messages %}
                        <div class="alert alert-info">{{ message }}</div>
                    {% endfor %}
                {% endif %}
            {% endwith %}
            <form id="registerForm" action="{{ url_for('register') }}" method="POST">
                <div class="mb-3">
                    <label for="role" class="form-label">Select Role:</label>
                    <select id="role" name="role" class="form-select" required>
                        <option value="">Select Role</option>
                        <option value="patient">Patient</option>
                        <option value="lab_assistant">Lab Assistant</option>
                        <option value="doctor">Doctor</option>
                    </select>
                </div>

                <div id="labAssistantIDField" class="mb-3 hidden">
                    <input type="text" name="lab_assistant_id" class="form-control" placeholder="Lab Assistant ID">
                </div>

                <div id="doctorIDField" class="mb-3 hidden">
                    <input type="text" name="doctor_id" class="form-control" placeholder="Doctor ID">
                </div>

                <div id="commonFields" class="hidden">
                    <div class="mb-3">
                        <input type="text" name="username" class="form-control" placeholder="Username" required>
                    </div>
                    <div class="mb-3">
                        <input type="password" name="password" id="password" class="form-control" placeholder="Password" required>
                        <span id="passwordStrength" class="error"></span>
                    </div>
                    <div class="mb-3">
                        <input type="password" name="confirm_password" id="confirm_password" class="form-control" placeholder="Confirm Password" required>
                        <span id="passwordError" class="error"></span>
                    </div>
                    <div class="mb-3">
                        <input type="email" name="email" id="email" class="form-control" placeholder="Email Address" required>
                        <span id="emailError" class="error"></span>
                    </div>
                    <div class="mb-3">
                        <input type="text" name="phone" id="phone" class="form-control" placeholder="Phone Number" required>
                        <span id="phoneError" class="error"></span>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary w-100">Register</button>

                <div class="message">
                    Already have an account? <a href="{{ url_for('login') }}">Login</a>
                </div>
            </form>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.getElementById("role").addEventListener("change", function() {
            var role = this.value;
            var commonFields = document.getElementById("commonFields");
            var labAssistantField = document.getElementById("labAssistantIDField");
            var doctorField = document.getElementById("doctorIDField");

            commonFields.classList.toggle("hidden", !role);
            labAssistantField.style.display = (role === "lab_assistant") ? "block" : "none";
            doctorField.style.display = (role === "doctor") ? "block" : "none";
        });

        document.getElementById("password").addEventListener("input", function() {
            var password = this.value;
            var strengthIndicator = document.getElementById("passwordStrength");
            var strongPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6,}$/;

            if (password.length < 6) {
                strengthIndicator.textContent = "Password must be at least 6 characters long";
                strengthIndicator.style.color = "red";
            } else if (strongPasswordRegex.test(password)) {
                strengthIndicator.textContent = "Strong Password";
                strengthIndicator.style.color = "green";
            } else {
                strengthIndicator.textContent = "Weak Password - Include uppercase, lowercase, number, and special character";
                strengthIndicator.style.color = "red";
            }
        });

        document.getElementById("registerForm").addEventListener("submit", function(event) {
            var password = document.getElementById("password").value;
            var confirmPassword = document.getElementById("confirm_password").value;
            var email = document.getElementById("email").value;
            var phone = document.getElementById("phone").value;
            var passwordError = document.getElementById("passwordError");
            var emailError = document.getElementById("emailError");
            var phoneError = document.getElementById("phoneError");

            passwordError.textContent = "";
            emailError.textContent = "";
            phoneError.textContent = "";

            if (password.length < 6) {
                passwordError.textContent = "Password must be at least 6 characters long.";
                event.preventDefault();
            }
            if (password !== confirmPassword) {
                passwordError.textContent = "Passwords do not match.";
                event.preventDefault();
            }

            var emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
            if (!emailPattern.test(email)) {
                emailError.textContent = "Invalid email format.";
                event.preventDefault();
            }

            if (!/^\d{10}$/.test(phone)) {
                phoneError.textContent = "Phone number must be 10 digits.";
                event.preventDefault();
            }
        });
    </script>



</body>
</html>

view_values.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Entered Values</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F7F7FF;

            color: #333;
            text-align: center;
        }

        /* Navbar Styling */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background: #fffefefe;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .feto, .health {
           font-size: 1.5rem;
           font-weight: bolder;
           margin: 0;
           padding: 0;
           display: inline-block;
        }

        .feto {
           color: #6617b5; /* Purple for 'Feto' */
           font-size: 1.6rem;
           font-weight: bolder;
        }

        .health {
           color: #ef5690; /* Pink for 'Health' */
           font-size: 1.6rem;
           font-weight: bolder;

        }

        .header-center,
        .header-right {
            display: flex;
            align-items: center;
            font-weight: bold;
            font-size: 20px;
            gap: 15px;
        }

        .header a {
            text-decoration: none;
            color: #000099;
            padding: 10px 15px;
            border-radius: 25px;
            transition: background 0.3s ease;
            font-weight: bold;
        }

        .header a:hover {
            background: #f0f0f0;
        }
        .header-center p {
           font-size: 25px; /* Adjust the text size */
           text-align: center;
           font-weight: bold; /* Make the text bold */
           color: #000099; /* Change text color to dark blue */
           text-transform: uppercase; /* Convert text to uppercase */
           letter-spacing: 1px; /* Add spacing between letters */
           margin: 0; /* Remove default margin */
           padding: 10px 20px; /* Add padding */

           border-radius: 8px; /* Rounded corners */

        }

        .form-container {
            max-width: 600px;
            margin: 50px auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        }

        h1 {
           text-align: center;
           color: #6617b5;
           font-weight: bold;
           font-size: 30px;
           margin-bottom: 15px;
        }

        .form-group {
           display: flex;
           align-items: center;
           margin-bottom: 10px;
           justify-content: space-between; /* Ensures consistent spacing */
        }

        .form-group label {
            flex: 1;
            font-weight: bold;
            text-align: left;
            padding-right: 30px;
            white-space: nowrap; /* Prevents label from wrapping */
        }


        .form-group span {
            width: 100px; /* Fixed width for the value box */
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            text-align: center;
            background: #f9f9f9;
            flex-shrink: 0; /* Prevents it from shrinking */
        }

        .btn-submit {
            width: 100%;
            padding: 12px;
            background: #6617b5;
            color: white;
            font-weight: bold;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: 0.3s;
            text-align: center;
            display: block;
            margin-top: 20px;
            text-decoration: none;
        }

        .btn-submit:hover {
            background: #530d98;
        }

    </style>
</head>
<body>


<!-- Navigation Bar -->
<nav class="header">
    <div class="header-left">
        <img src="{{ url_for('static', filename='images/logo200.png') }}" alt="Logo">
        <span class="feto">FETO</span><span class="health">HEALTH</span>
    </div>
    <div class="header-center">

        <p> View Test Values</p>

    </div>
    <div class="header-right">

        <a href="{{ url_for('doctor_dashboard') }}">Go Back</a>



    </div>
</nav>



<div class="form-container">
    <h1>Patient: {{ patient.username }}</h1>
    <p><strong>Lab Assistant Name:</strong> {{ lab_assistant.username }}</p>
    <p><strong>Entered Values:</strong></p>

    {% for key, value in report['values'].items() %}
    <div class="form-group">
        <label>{{ key }}</label>
        <span>{{ value }}</span>
    </div>
    {% endfor %}


</div>
</body>
</html>

app.py

from flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify
from flask_pymongo import PyMongo
import re
from werkzeug.security import generate_password_hash, check_password_hash
import pickle
import pandas as pd
from sklearn.preprocessing import StandardScaler
import shap
import numpy as np
from bson import ObjectId
from pymongo import MongoClient
from bson.objectid import ObjectId
from datetime import datetime
from flask import send_file, request
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
import io
import os
from flask import current_app
from reportlab.platypus import Image
from reportlab.lib.utils import ImageReader



app = Flask(__name__)
app.secret_key = 'your_secret_key'

# 🔹 MongoDB Atlas Configuration
app.config["MONGO_URI"] = "mongodb+srv://niyacv13:niyaviju@cluster0.78z9j.mongodb.net/fetalstatus?retryWrites=true&w=majority&appName=Cluster0"
mongo = PyMongo(app)
db = mongo.db  # Get database reference

# 🔹 Ensure MongoDB is connected
if db is None:
    raise Exception("MongoDB connection failed!")


admin_collection = db.admin_users
users_collection = db.users  # Define the users collection
lab_reports_collection = db["lab_reports"]





if not admin_collection.find_one({"email": "fhadmin@gmail.com"}):
    admin_collection.insert_one({"email": "fhadmin@gmail.com", "password": "admin123"})


# Home Page
@app.route('/')
def home():
    return render_template('home.html')


@app.route('/about')
def about():
    return render_template('about.html')





@app.route("/admin_login", methods=["GET", "POST"])
def admin_login():
    if request.method == "POST":
        email = request.form.get("email")  # Changed to email
        password = request.form.get("password")

        admin = admin_collection.find_one({"email": email, "password": password})  # Search by email
        if admin:
            session["admin"] = True
            return redirect(url_for("admin_dashboard"))
        else:
            flash("Invalid credentials", "error")

    return render_template("admin_login.html")



@app.route("/admin_dashboard")
def admin_dashboard():
    if "admin" not in session:
        return redirect(url_for("admin_login"))
    return render_template("admin_dashboard.html")


@app.route("/fetch_users/<role>")
def fetch_users(role):
    if "admin" not in session:
        return jsonify([])

    users = users_collection.find({"role": role})
    users_list = []

    for user in users:
        user_id = user.get("lab_assistant_id") if role == "lab_assistant" else user.get("doctor_id")
        updated_at = user.get("updated_at", "N/A")

        if updated_at != "N/A":
            date_part, time_part = updated_at.split(" ")
        else:
            date_part, time_part = "N/A", "N/A"

        users_list.append({
            "user_id": user_id,
            "_id": str(user["_id"]),  # Convert ObjectId to string
            "username": user["username"],
            "email": user["email"],
            "password": user["password"],
            "status": user.get("status", "pending"),
            "updated_date": date_part,
            "updated_time": time_part,
            "mongo_id": user["_id"]  # Store ObjectId for sorting
        })

    status_order = {"pending": 0, "approved": 1, "rejected": 2}

    users_list.sort(key=lambda x: (
        status_order[x["status"]],          # Sort by status (pending first)
        str(x["mongo_id"]) if x["status"] == "pending" else "",  # Sort pending users by ObjectId (newest first)
        x["updated_date"] if x["status"] != "pending" else ""    # Sort approved/rejected by date
    ), reverse=False)

    return jsonify(users_list)


@app.route("/update_status", methods=["POST"])
def update_status():
    if "admin" not in session:
        return jsonify({"message": "Unauthorized"}), 401

    data = request.json
    user_id = data["userId"]
    status = data["status"]
    update_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    user = users_collection.find_one({"_id": ObjectId(user_id)})
    if user:
        users_collection.update_one(
            {"_id": ObjectId(user_id)},
            {"$set": {"status": status, "updated_at": update_time}}
        )
        return jsonify({"message": f"User {status} successfully!", "role": user["role"], "updated_at": update_time})

    return jsonify({"message": "User not found"}), 404



@app.route("/delete_user", methods=["POST"])
def delete_user():
    if "admin" not in session:
        return jsonify({"message": "Unauthorized"}), 401

    data = request.json
    user_id = data["userId"]

    result = users_collection.delete_one({"_id": ObjectId(user_id)})
    if result.deleted_count > 0:
        return jsonify({"message": "User deleted successfully!"})

    return jsonify({"message": "User not found"}), 404






@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        role = request.form.get("role")
        username = request.form.get("username")
        password = request.form.get("password")
        confirm_password = request.form.get("confirm_password")
        email = request.form.get("email")
        phone = request.form.get("phone")
        lab_assistant_id = request.form.get("lab_assistant_id")
        doctor_id = request.form.get("doctor_id")

        # Validation for Lab Assistant ID
        lab_assistant_pattern = r"^FHL([1-5][0-9]{2}|600)$"
        doctor_pattern = r"^FHD([1-5][0-9]{2}|600)$"

        if role == "lab_assistant":
            if not lab_assistant_id or not re.match(lab_assistant_pattern, lab_assistant_id):
                flash("Invalid Lab Assistant ID!", "error")
                return redirect(url_for("register"))

        if role == "doctor":
            if not doctor_id or not re.match(doctor_pattern, doctor_id):
                flash("Invalid Doctor ID!", "error")
                return redirect(url_for("register"))

        if role in ["lab_assistant", "doctor"]:
            status = "pending"
        else:
            status = "approved"

        # **Check for existing credentials separately**
        if users_collection.find_one({"username": username}):
            flash("Username already exists!", "error")
            return redirect(url_for("register"))

        if users_collection.find_one({"email": email}):
            flash("Email ID already exists!", "error")
            return redirect(url_for("register"))

        if users_collection.find_one({"phone": phone}):
            flash("Phone number already exists!", "error")
            return redirect(url_for("register"))

        if role == "lab_assistant" and users_collection.find_one({"lab_assistant_id": lab_assistant_id}):
            flash("Lab Assistant ID already exists!", "error")
            return redirect(url_for("register"))

        if role == "doctor" and users_collection.find_one({"doctor_id": doctor_id}):
            flash("Doctor ID already exists!", "error")
            return redirect(url_for("register"))

        # Strong Password Validation
        strong_password_regex = r"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6,}$"
        if not re.match(strong_password_regex, password):
            flash("Weak password! Use uppercase, lowercase, number, and special character.", "error")
            return redirect(url_for("register"))

        if password != confirm_password:
            flash("Passwords do not match", "error")
            return redirect(url_for("register"))

        # Email Validation
        email_pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
        if not re.match(email_pattern, email):
            flash("Invalid email format", "error")
            return redirect(url_for("register"))

        # Phone Number Validation
        if not re.match(r"^\d{10}$", phone):
            flash("Phone number must be 10 digits", "error")
            return redirect(url_for("register"))

        # Create user document with role-specific fields
        user_data = {
            "role": role,
            "username": username,
            "password": password,
            "email": email,
            "phone": phone,
            "status": status
        }

        if role == "lab_assistant":
            user_data["lab_assistant_id"] = lab_assistant_id
        elif role == "doctor":
            user_data["doctor_id"] = doctor_id

        users_collection.insert_one(user_data)

        if status == "approved":
            flash("Registration successful, You can now log in.", "success")
        else:
            flash("Registration successful , Login to see admin status.", "info")

        return redirect(url_for("register"))

    return render_template("register.html")






@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        role = request.form.get("role")
        email = request.form.get("email")
        password = request.form.get("password")
        doctor_id = request.form.get("doctor_id")
        lab_assistant_id = request.form.get("lab_assistant_id")

        user = users_collection.find_one({"email": email})

        if not user:
            flash("User Does Not Exist!", "error")
            return redirect(url_for("login"))

        if user["role"] != role:
            flash("Invalid Role!", "error")
            return redirect(url_for("login"))

        if user["password"] != password:
            flash("Invalid Password!", "error")
            return redirect(url_for("login"))

        if user["status"] == "pending":
            flash("Your account is awaiting admin approval.", "error")
            return redirect(url_for("login"))

        if user["status"] == "rejected":
            flash("Admin has rejected your account.", "error")
            return redirect(url_for("login"))

        # Store user details in session
        session["user_id"] = str(user["_id"])
        session["username"] = user["username"]
        session["role"] = user["role"]

        # Role-based redirection
        if role == "patient":

            return redirect(url_for("patient_dashboard"))

        elif role == "doctor":
            if not doctor_id or doctor_id != user.get("doctor_id"):
                flash("Invalid Doctor ID!", "error")
                return redirect(url_for("login"))

            return redirect(url_for("doctor_dashboard"))

        elif role == "lab_assistant":
            if not lab_assistant_id or lab_assistant_id != user.get("lab_assistant_id"):
                flash("Invalid Lab Assistant ID!", "error")
                return redirect(url_for("login"))

            return redirect(url_for("lab_assistant_dashboard"))

        flash("User Does Not Exist!", "error")
        return redirect(url_for("login"))

    return render_template("login.html")



@app.route("/patient_dashboard")
def patient_dashboard():
    if "username" not in session or session["role"] != "patient":
        return redirect(url_for("login"))

    patient_username = session["username"]

    # Fetch the latest lab report for the logged-in patient
    lab_report = lab_reports_collection.find_one(
        {"patient_username": patient_username},
        sort=[("date", -1), ("time", -1)]  # Get the latest report
    )

    if lab_report:
        # Convert ObjectId to string and ensure correct data formatting
        lab_report["_id"] = str(lab_report["_id"])

    return render_template("patient_dashboard.html", username=patient_username, lab_report=lab_report)



from flask import Flask, render_template, request, redirect, url_for, session, send_file
import io
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4



@app.route("/download_report")
def download_report():
    if "username" not in session or session["role"] != "patient":
        return redirect(url_for("login"))

    patient_username = session["username"]

    # Fetch the latest lab report for the logged-in patient
    lab_report = lab_reports_collection.find_one(
        {"patient_username": patient_username},
        sort=[("date", -1), ("time", -1)]
    )

    if not lab_report:
        return "No report found!", 404

    # Get doctor name from the request
    doctor_name = request.args.get("doctor_name", "Dr. Nisa")

    # Create PDF in memory
    pdf_buffer = io.BytesIO()
    c = canvas.Canvas(pdf_buffer, pagesize=A4)
    width, height = A4

    # Set margins
    margin = 40

    # Draw Border
    c.setStrokeColorRGB(0, 0, 0)
    c.setLineWidth(2)
    c.rect(margin, margin, width - 2 * margin, height - 2 * margin, stroke=1, fill=0)

    # Report Heading (Center)
    c.setFont("Helvetica-Bold", 20)
    c.drawString(width / 2 - 130, height - 80, "FETOHEALTH REPORT")

    # Patient and Doctor Details
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, height - 120, "Patient Details:")
    c.setFont("Helvetica", 12)
    c.drawString(50, height - 140, f"Name: {lab_report['patient_username']}")
    c.drawString(50, height - 160, f"Email: {lab_report['patient_email']}")
    c.drawString(50, height - 180, f"Phone: {lab_report['patient_phone']}")

    # Lab Assistant and Doctor Details (Right Side)
    c.setFont("Helvetica-Bold", 12)
    c.drawString(width / 2 + 50, height - 120, "Medical Staff:")
    c.setFont("Helvetica", 12)
    c.drawString(width / 2 + 50, height - 140, f"Lab Assistant: {lab_report['lab_assistant_username']}")
    c.drawString(width / 2 + 50, height - 160, f"Doctor: {doctor_name}")

    c.setFont("Helvetica-Bold", 12)
    c.drawString(width / 2 + 50, height - 180, "Report Generated On:")
    c.setFont("Helvetica", 12)
    c.drawString(width / 2 + 50, height - 200, f"Date: {lab_report['date']}")
    c.drawString(width / 2 + 50, height - 220, f"Time: {lab_report['time']}")

    shift_down = 20  # Adjust this value to move everything lower

    # Prediction Result (Shifted)
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, height - (220 + shift_down), "Prediction Result:")
    c.setFont("Helvetica", 12)
    c.drawString(70, height - (240 + shift_down), f"Fetal Health Condition: {lab_report['prediction']}")

    # Lab Assistant's Entered Values (Shifted)
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, height - (270 + shift_down), "Lab Assistant's Observations:")
    c.setFont("Helvetica", 12)
    y = height - (290 + shift_down)
    for key, value in lab_report['values'].items():
        c.drawString(70, y, f"{key}: {value}")
        y -= 20

    # Doctor's Remarks (Shifted)
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y - 40, "Doctor's Remarks:")
    c.setFont("Helvetica", 12)
    c.drawString(70, y - 60, f"{lab_report['doctor_message']}")

    # Save and return PDF
    c.save()
    pdf_buffer.seek(0)

    return send_file(pdf_buffer, as_attachment=True, download_name="Fetal_Health_Report.pdf", mimetype="application/pdf")



@app.route('/lab_assistant_dashboard', methods=['GET', 'POST'])
def lab_assistant_dashboard():
    if "username" not in session or session["role"] != "lab_assistant":
        return redirect(url_for("login"))

    lab_reports_collection = mongo.db.lab_reports
    users_collection = mongo.db.users

    # Fetch all patients who do not yet have an entry in lab_reports
    existing_patients = {report["patient_username"] for report in lab_reports_collection.find()}
    new_patients = users_collection.find({"role": "patient", "username": {"$nin": list(existing_patients)}})

    # Insert missing patients into lab_reports with empty date, time, and status
    for patient in new_patients:
        lab_reports_collection.insert_one({
            "patient_username": patient["username"],
            "patient_email": patient["email"],
            "patient_phone": patient["phone"],
            "lab_assistant_username": session["username"],  # Storing lab assistant username
            "date": "",
            "time": "",
            "status": "",
            "values": None
        })

    # Get selected sorting/filtering option from the dropdown
    sort_option = request.args.get("sort", "new_to_old")  # Default to 'new to old'

    query = {"lab_assistant_username": session["username"]}

    if sort_option == "pending":
        query["status"] = "Pending"
    elif sort_option == "predicted":
        query["status"] = "Predicted"

    # Custom sorting: New users (status="") appear at the top, then sort by date/time
    sort_order = [
        ("status", 1),  # Ensures status="" appears first
        ("date", -1),
        ("time", -1)
    ]

    if sort_option == "old_to_new":
        sort_order = [
            ("status", 1),  # Ensures status="" appears first
            ("date", 1),
            ("time", 1)
        ]

    # Fetch reports with sorting and filtering
    reports = list(lab_reports_collection.find(query).sort(sort_order))

    return render_template("lab_assistant_dashboard.html", reports=reports, selected_sort=sort_option)




@app.route('/enter_values/<report_id>', methods=['GET', 'POST'])
def enter_values(report_id):
    if "username" not in session or session["role"] != "lab_assistant":
        return redirect(url_for("login"))

    lab_reports_collection = mongo.db.lab_reports
    report = lab_reports_collection.find_one({"_id": ObjectId(report_id)})

    if request.method == "POST":
        test_values = {field: request.form[field] for field in [
            'baseline_value', 'accelerations', 'fetal_movement', 'uterine_contractions',
            'light_decelerations', 'severe_decelerations', 'prolongued_decelerations',
            'abnormal_short_term_variability', 'mean_value_of_short_term_variability',
            'percentage_of_time_with_abnormal_long_term_variability', 'mean_value_of_long_term_variability',
            'histogram_width', 'histogram_min', 'histogram_max', 'histogram_number_of_peaks',
            'histogram_number_of_zeroes', 'histogram_mode', 'histogram_mean', 'histogram_median',
            'histogram_variance', 'histogram_tendency'
        ]}

        updated_date = datetime.now().strftime("%Y-%m-%d")
        updated_time = datetime.now().strftime("%H:%M:%S")

        lab_reports_collection.update_one(
            {"_id": ObjectId(report_id)},
            {"$set": {
                "values": test_values,
                "date": updated_date,
                "time": updated_time,
                "status": "Pending"
            }}
        )

        return redirect(url_for("lab_assistant_dashboard"))

    return render_template("enter_values.html", patient=report)


@app.route('/delete_report/<report_id>', methods=['POST'])
def delete_report(report_id):
    if "username" not in session or session["role"] != "lab_assistant":
        return redirect(url_for("login"))

    lab_reports_collection = mongo.db.lab_reports

    # Remove report only from the dashboard (but keep it in the database)
    lab_reports_collection.update_one(
        {"_id": ObjectId(report_id)},
        {"$set": {"lab_assistant_username": None}}
    )

    return redirect(url_for("lab_assistant_dashboard"))







# Load trained model, scaler, and SHAP explainer
with open("fetal_ensemble_model.pkl", "rb") as model_file:
    ensemble_model = pickle.load(model_file)
with open("fetal_scaler.pkl", "rb") as scaler_file:
    scaler = pickle.load(scaler_file)
with open("fffetal_shap_explainer.pkl", "rb") as shap_file:
    loaded_explainer = pickle.load(shap_file)

# Class label mapping
class_labels = {1: 'Normal', 2: 'Suspect', 3: 'Pathological'}


@app.route('/doctor_dashboard')
def doctor_dashboard():
    if "username" not in session or session["role"] != "doctor":
        return redirect(url_for("login"))

    lab_reports_collection = mongo.db.lab_reports

    # Get selected sorting option from the dropdown
    sort_option = request.args.get("sort", "new_to_old")  # Default to 'new to old'

    query = {}  # Default query, fetch all reports

    # Filtering logic based on status
    if sort_option == "pending":
        query["status"] = "Pending"
    elif sort_option == "predicted":
        query["status"] = "Predicted"

    # Sorting logic
    sort_order = [("date", -1), ("time", -1)]  # Default: New to Old
    if sort_option == "old_to_new":
        sort_order = [("date", 1), ("time", 1)]

    # Fetch reports with sorting and filtering
    reports = list(lab_reports_collection.find(query).sort(sort_order))

    return render_template("doctor_dashboard.html", reports=reports, selected_sort=sort_option)



@app.route('/view_values/<report_id>')
def view_values(report_id):
    if "username" not in session or session["role"] != "doctor":
        return redirect(url_for("login"))

    lab_reports_collection = mongo.db.lab_reports
    users_collection = mongo.db.users  # Assuming you have a users collection

    report = lab_reports_collection.find_one({'_id': ObjectId(report_id)})

    if not report:
        flash("Report not found.", "danger")
        return redirect(url_for("doctor_dashboard"))

    # Fetch patient details
    patient = users_collection.find_one({'username': report.get('patient_username')})
    lab_assistant = users_collection.find_one({'username': report.get('lab_assistant_username')})

    return render_template("view_values.html",
                           report=report,
                           patient=patient,
                           lab_assistant=lab_assistant)



import matplotlib.pyplot as plt
import numpy as np
import shap
import os

@app.route('/predict/<report_id>', methods=['POST'])
def predict(report_id):
    try:
        if "username" not in session or session["role"] != "doctor":
            return redirect(url_for("login"))

        lab_reports_collection = mongo.db.lab_reports
        report = lab_reports_collection.find_one({'_id': ObjectId(report_id)})

        if not report or 'values' not in report:
            return redirect(url_for('doctor_dashboard'))

        # Update report status to "Predicted"
        lab_reports_collection.update_one(
            {'_id': ObjectId(report_id)},
            {'$set': {'status': 'Predicted'}}
        )

        # Process values for prediction
        test_values = report['values']
        user_input = [float(test_values[key]) for key in test_values.keys()]

        columns = [
            'baseline value', 'accelerations', 'fetal_movement', 'uterine_contractions',
            'light_decelerations', 'severe_decelerations', 'prolongued_decelerations',
            'abnormal_short_term_variability', 'mean_value_of_short_term_variability',
            'percentage_of_time_with_abnormal_long_term_variability', 'mean_value_of_long_term_variability',
            'histogram_width', 'histogram_min', 'histogram_max', 'histogram_number_of_peaks',
            'histogram_number_of_zeroes', 'histogram_mode', 'histogram_mean', 'histogram_median',
            'histogram_variance', 'histogram_tendency'
        ]

        new_data = pd.DataFrame([user_input], columns=columns)
        new_data_scaled = scaler.transform(new_data)

        prediction = ensemble_model.predict(new_data_scaled)[0]
        predicted_class = prediction + 1
        prediction_label = class_labels.get(predicted_class, "Unknown")

        prediction_probabilities = ensemble_model.predict_proba(new_data_scaled)[0].tolist()

        # SHAP Importance Calculation
        shap_values = loaded_explainer.shap_values(new_data_scaled)
        mean_shap_values = np.abs(np.mean(shap_values, axis=0))
        shap_importance = sorted(zip(columns, mean_shap_values), key=lambda x: x[1], reverse=True)
        top_3_features = shap_importance[:3]

        # Generate SHAP feature importance graphs
        shap_importance_df = pd.DataFrame(shap_importance, columns=["Feature", "SHAP Importance"])
        top_3_df = pd.DataFrame(top_3_features, columns=["Feature", "SHAP Importance"])

        # Save All 21 Features SHAP Graph
        plt.figure(figsize=(10, 6))
        plt.barh(shap_importance_df["Feature"][::-1], shap_importance_df["SHAP Importance"].values[::-1], color="skyblue")
        plt.xlabel("SHAP Value")
        plt.ylabel("Feature")
        plt.title("SHAP Feature Importance (All Features)")
        shap_all_path = os.path.join("static", "shap_all_features.png")
        plt.savefig(shap_all_path, bbox_inches='tight')
        plt.close()

        # Save Top 3 Features SHAP Graph
        plt.figure(figsize=(6, 4))
        plt.barh(top_3_df["Feature"][::-1], top_3_df["SHAP Importance"].values[::-1], color="green")
        plt.xlabel("SHAP Value")
        plt.ylabel("Feature")
        plt.title("Top 3 SHAP Feature Importance")
        shap_top3_path = os.path.join("static", "shap_top3_features.png")
        plt.savefig(shap_top3_path, bbox_inches='tight')
        plt.close()

        # Feature Explanations
        feature_explanations = {
            "baseline value": {
                "Normal": "The fetal heart rate baseline is within 110-160 bpm, indicating a well-oxygenated fetus.",
                "Suspect": "Mild deviations from normal may indicate transient factors like maternal fever or mild fetal distress.",
                "Pathological": "Baseline >160 bpm or <110 bpm suggests fetal hypoxia, infection, or neurological compromise."
            },
            "accelerations": {
                "Normal": "Presence of regular accelerations is a strong indicator of fetal well-being.",
                "Suspect": "Reduced accelerations may indicate fetal sleep cycles but should be monitored.",
                "Pathological": "Absence of accelerations suggests fetal distress or compromised autonomic regulation."
            },
            "fetal_movement": {
                "Normal": "Adequate fetal movements reflect active and responsive behavior.",
                "Suspect": "Decreased movement could be due to fetal sleep but requires observation.",
                "Pathological": "Severely reduced movements may indicate hypoxia or neurological impairment."
            },
            "uterine_contractions": {
                "Normal": "Moderate contractions are expected and support normal labor progression.",
                "Suspect": "Frequent contractions could lead to temporary oxygen reduction for the fetus.",
                "Pathological": "Excessive contractions may cause distress due to insufficient placental blood flow."
            },
            "light_decelerations": {
                "Normal": "Occasional mild decelerations are normal and often due to fetal movements.",
                "Suspect": "Frequent occurrences may suggest umbilical cord compression.",
                "Pathological": "Repeated or prolonged decelerations could indicate oxygen deprivation."
            },
            "severe_decelerations": {
                "Normal": "None or very rare occurrences indicate fetal stability.",
                "Suspect": "Some severe decelerations may occur but require further evaluation.",
                "Pathological": "Frequent, prolonged decelerations indicate serious fetal compromise."

            },
            "prolongued_decelerations": {
                "Normal": "Not observed under normal conditions.",
                "Suspect": "One or two prolonged decelerations may occur but need assessment.",
                "Pathological": "Persistent prolonged decelerations suggest fetal distress and may require immediate intervention."
            },
            "abnormal_short_term_variability": {
                "Normal": "Balanced variability in heart rate reflects a healthy autonomic system.",
                "Suspect": "Slightly reduced variability suggests fetal sleep or mild distress.",
                "Pathological": "Significantly low variability is a warning sign of fetal compromise."
            },
            "mean_value_of_short_term_variability": {
                "Normal": "Falls within an expected range, showing good reactivity.",
                "Suspect": "Mildly reduced variability requires monitoring.",
                "Pathological": "Extremely low values suggest fetal distress or central nervous system dysfunction."
            },
            "percentage_of_time_with_abnormal_long_term_variability": {
               "Normal": "Minimal abnormal variability is expected in a healthy fetus.",
               "Suspect": "Increased percentage suggests irregular fetal response to stimuli.",
               "Pathological": "High percentages indicate instability in fetal heart rate control."
            },
            "mean_value_of_long_term_variability": {
                "Normal": "Expected fluctuations show a healthy nervous system.",
                "Suspect": "Slightly abnormal values suggest minor fetal stress.",
                "Pathological": "Severely reduced variability signals fetal distress."
            },
            "histogram_width": {
               "Normal": "A well-distributed heart rate pattern is present.",
               "Suspect": "A narrow or excessively broad range may suggest altered heart rate control.",
               "Pathological": "Extreme values indicate severe fetal distress or arrhythmia."

            },
            "histogram_min": {
                "Normal": "Lowest recorded FHR is within the safe range.",
                "Suspect": "Slightly lower values may require observation.",
                "Pathological": "Very low values may indicate fetal bradycardia and distress."
            },
            "histogram_max": {
               "Normal": "Highest recorded FHR is within the normal range.",
                "Suspect": "Slight elevations may indicate temporary stress.",
                "Pathological": "Extremely high values (>180 bpm) suggest fetal tachycardia, requiring intervention."

            },
            "histogram_number_of_peaks": {
               "Normal": "Indicates healthy heart rate variation.",
               "Suspect": "Fewer peaks may suggest a lack of variability.",
               "Pathological": "A flat histogram indicates fetal distress."

            },
            "histogram_number_of_zeroes": {
               "Normal": "Few or no zeroes are expected.",
               "Suspect": "Increased zeroes may suggest erratic heart rate.",
               "Pathological": "High zero counts could indicate recording errors or cardiac arrest."
            },
            "histogram_mode": {
               "Normal": "Most frequent heart rate value is in the healthy range.",
               "Suspect": "Shifts in mode suggest altered heart rate regulation.",
               "Pathological": "Mode outside normal FHR range indicates fetal compromise."
            },
            "histogram_mean": {
                "Normal": "Mean value reflects stable heart rate distribution.",
                "Suspect": "Slight shifts may suggest transient distress.",
                "Pathological": "Significant deviation indicates irregular heart rate regulation."
            },
            "histogram_median": {
               "Normal": "Median is close to the mean, suggesting a normal heart rate pattern.",
               "Suspect": "Differences between median and mean may indicate irregularities.",
               "Pathological": "A large gap suggests asymmetric fetal heart rate patterns, possibly due to distress."

            },
            "histogram_variance": {
               "Normal": "Indicates a balanced variation in heart rate.",
               "Suspect": "Increased variance may suggest an unstable heart rate pattern.",
               "Pathological": "Extremely high or low variance signals potential fetal distress."

            },
            "histogram_tendency": {
               "Normal": "Stable heart rate tendency with mild fluctuations.",
               "Suspect": "Increasing or decreasing tendency may indicate temporary stress.",
               "Pathological": "A strong tendency towards bradycardia or tachycardia is concerning."
            }
        }

        explanation_text = []
        for feature, shap_value in top_3_features:
            impact_direction = "increasing" if shap_value > 0 else "decreasing"
            explanation = feature_explanations.get(feature, {}).get(prediction_label, "No explanation available.")
            explanation_text.append(f"🔹 {feature} has a SHAP value of {shap_value:.4f}, {impact_direction} the probability of {prediction_label}.\n  {explanation}")

        # Overall Explanation
        overall_interpretation = f"Fetal Health Condition is {prediction_label}.\n"
        overall_interpretation += f"This decision was mostly influenced by {top_3_features[0][0]}, {top_3_features[1][0]}, and {top_3_features[2][0]}."

        # Update the database with prediction results
        lab_reports_collection.update_one(
            {'_id': ObjectId(report_id)},
            {'$set': {
                'prediction': prediction_label,
                'probabilities': prediction_probabilities,
                'top_features': top_3_features
            }}
        )

        return render_template("predict_result.html",
                               report_id=report_id,
                               username=report.get('patient_username', 'Unknown'),
                               phone=report.get('patient_phone', 'Unknown'),
                               lab_assistant=report.get('lab_assistant_username', 'Unknown'),
                               prediction=prediction_label,
                               probabilities=prediction_probabilities,
                               top_features=top_3_features,
                               shap_all_path=shap_all_path,
                               shap_top3_path=shap_top3_path,
                               explanation_text=explanation_text,
                               overall_interpretation=overall_interpretation)

    except Exception as e:
        return render_template("error.html", error_message=str(e))


@app.route('/delete_report_doctor/<report_id>', methods=['POST'])
def delete_report_doctor(report_id):
    if "username" not in session or session["role"] != "doctor":
        return redirect(url_for("login"))

    lab_reports_collection = mongo.db.lab_reports

    # Update the doctor dashboard without deleting from the database
    lab_reports_collection.update_one(
        {'_id': ObjectId(report_id)},
        {'$set': {'deleted_by_doctor': True}}
    )


    return redirect(url_for("doctor_dashboard"))


@app.route('/add_doctor_message/<report_id>', methods=['POST'])
def add_doctor_message(report_id):
    try:
        message = request.form['doctor_message']
        lab_reports_collection = mongo.db.lab_reports  # Assuming you are using MongoDB
        lab_reports_collection.update_one({'_id': ObjectId(report_id)}, {'$set': {'doctor_message': message}})

        return redirect(url_for('doctor_dashboard'))
    except Exception as e:
        return f"Error in adding doctor's message: {e}"






@app.route("/logout")
def logout():
    session.clear()
    return redirect(url_for("home"))




if __name__ == "__main__":
    app.run(debug=True)

fetalctg.ipynb

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from xgboost import XGBClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix, log_loss
from imblearn.over_sampling import SMOTE
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import VotingClassifier
import shap
from collections import Counter

# Load dataset
data = pd.read_csv('fetal_health.csv')

# Remove duplicate rows
data = data.drop_duplicates()

# Separate features and target
X = data.drop('fetal_health', axis=1)
y = data['fetal_health']

# Check class distribution before applying SMOTE
print("Class Distribution Before SMOTE:\n", y.value_counts())

# Apply SMOTE to balance the dataset
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)
y_resampled = y_resampled.astype(int)

# Check class distribution after applying SMOTE
print("\nClass Distribution After SMOTE:\n", y_resampled.value_counts())

# Visualizing Class Distribution
fig, axes = plt.subplots(1, 2, figsize=(12, 5))

sns.countplot(x=y, ax=axes[0])
axes[0].set_title("Class Distribution Before SMOTE")
axes[0].set_xlabel("Fetal Health Class")
axes[0].set_ylabel("Count")

sns.countplot(x=y_resampled, ax=axes[1])
axes[1].set_title("Class Distribution After SMOTE")
axes[1].set_xlabel("Fetal Health Class")
axes[1].set_ylabel("Count")

plt.tight_layout()
plt.show()



# Fix the labels for XGBoost
y_resampled = y_resampled - 1  # Shift labels from [1, 2, 3] to [0, 1, 2]

# Split data into Train (70%), Validation (15%), and Test (15%)
X_train, X_temp, y_train, y_temp = train_test_split(X_resampled, y_resampled, test_size=0.3, random_state=42, stratify=y_resampled)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42, stratify=y_temp)

# Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)
X_test_scaled = scaler.transform(X_test)

# Model Initialization
xgb = XGBClassifier(n_estimators=200, learning_rate=0.1, max_depth=6, random_state=42)
rf = RandomForestClassifier(n_estimators=200, max_depth=10, random_state=42)
knn = KNeighborsClassifier(n_neighbors=15)
gb = GradientBoostingClassifier(n_estimators=150, learning_rate=0.1, random_state=42)

models = {'XGBoost': xgb, 'Random Forest': rf, 'KNN': knn, 'Gradient Boosting': gb}

# Model Training and Evaluation
for name, model in models.items():
    model.fit(X_train_scaled, y_train)

    train_pred = model.predict(X_train_scaled)
    val_pred = model.predict(X_val_scaled)
    test_pred = model.predict(X_test_scaled)

    train_accuracy = model.score(X_train_scaled, y_train)
    val_accuracy = model.score(X_val_scaled, y_val)
    test_accuracy = model.score(X_test_scaled, y_test)

    train_loss = log_loss(y_train, model.predict_proba(X_train_scaled))
    val_loss = log_loss(y_val, model.predict_proba(X_val_scaled))
    test_loss = log_loss(y_test, model.predict_proba(X_test_scaled))

    print(f"\n{name} Model Performance:")
    print(f"Train Accuracy: {train_accuracy * 100:.2f}%")
    print(f"Validation Accuracy: {val_accuracy * 100:.2f}%")
    print(f"Test Accuracy: {test_accuracy * 100:.2f}%")

    print(f"Train Loss: {train_loss:.4f}")
    print(f"Validation Loss: {val_loss:.4f}")
    print(f"Test Loss: {test_loss:.4f}")

    print(f"\n{name} Classification Report:\n", classification_report(y_test, test_pred))

    sns.heatmap(confusion_matrix(y_test, test_pred), annot=True, fmt='d')
    plt.title(f"Confusion Matrix for {name}")
    plt.show()

# Voting Classifier (Ensemble Model)
ensemble_model = VotingClassifier(estimators=[
    ('xgb', xgb),
    ('rf', rf),
    ('knn', knn),
    ('gb', gb)
], voting='soft')

ensemble_model.fit(X_train_scaled, y_train)

# Predictions
ensemble_train_pred = ensemble_model.predict(X_train_scaled)
ensemble_val_pred = ensemble_model.predict(X_val_scaled)
ensemble_test_pred = ensemble_model.predict(X_test_scaled)

# Accuracy of Ensemble Model
ensemble_train_accuracy = ensemble_model.score(X_train_scaled, y_train)
ensemble_val_accuracy = ensemble_model.score(X_val_scaled, y_val)
ensemble_test_accuracy = ensemble_model.score(X_test_scaled, y_test)

# Loss of Ensemble Model
ensemble_train_loss = log_loss(y_train, ensemble_model.predict_proba(X_train_scaled))
ensemble_val_loss = log_loss(y_val, ensemble_model.predict_proba(X_val_scaled))
ensemble_test_loss = log_loss(y_test, ensemble_model.predict_proba(X_test_scaled))

print("\nEnsemble Model Performance:")
print(f"Train Accuracy: {ensemble_train_accuracy * 100:.2f}%")
print(f"Validation Accuracy: {ensemble_val_accuracy * 100:.2f}%")
print(f"Test Accuracy: {ensemble_test_accuracy * 100:.2f}%")

print(f"Train Loss: {ensemble_train_loss:.4f}")
print(f"Validation Loss: {ensemble_val_loss:.4f}")
print(f"Test Loss: {ensemble_test_loss:.4f}")

print("\nEnsemble Model Report:\n", classification_report(y_test, ensemble_test_pred))

# Predicting on a new data point (single instance)
new_data = pd.DataFrame({
    'baseline value': [133],  # Higher baseline value, could be indicative of a different class
    'accelerations': [0.003],  # Acceleration might be higher for class 2
    'fetal_movement': [0],  # Slightly more fetal movement
    'uterine_contractions': [0.008],  # Uterine contractions might be more frequent for class 2
    'light_decelerations': [0.003],  # Slightly more decelerations
    'severe_decelerations': [0],  # Mild severe deceleration
    'prolongued_decelerations': [0],  # Prolonged decelerations slightly higher
    'abnormal_short_term_variability': [16],  # Short term variability higher
    'mean_value_of_short_term_variability': [2.1],  # Increased mean value
    'percentage_of_time_with_abnormal_long_term_variability': [0],  # More time with abnormal long-term variability
    'mean_value_of_long_term_variability': [13.4],  # Increased mean value for long-term variability
    'histogram_width': [130],  # Wider histogram could indicate different characteristics
    'histogram_min': [68],
    'histogram_max': [198],  # Higher maximum could indicate a different class
    'histogram_number_of_peaks': [5],  # More peaks in the histogram
    'histogram_number_of_zeroes': [1],  # More zeros might correlate with different patterns
    'histogram_mode': [141],  # Mode might be higher
    'histogram_mean': [135],  # Higher mean value
    'histogram_median': [138],  # Higher median
    'histogram_variance': [13],  # More variance
    'histogram_tendency': [0]  # Slightly more tendency
})

# Scale the new data using the same scaler
new_data_scaled = scaler.transform(new_data)

# Use the Ensemble Model to predict the class for the new data
ensemble_predictions = ensemble_model.predict(new_data_scaled)

# Define the mapping for class labels (starting from 1 instead of 0)
class_labels = {1: 'Normal', 2: 'Suspect', 3: 'Pathological'}

# Get the class number and shift back to [1, 2, 3]
predicted_class = ensemble_predictions[0] + 1
predicted_class_name = class_labels[predicted_class]

print(f"New Data Prediction: class {predicted_class} , {predicted_class_name}")

# Print the prediction probabilities
ensemble_probabilities = ensemble_model.predict_proba(new_data_scaled)
print(f"New Data Prediction Probabilities: {ensemble_probabilities[0]}")

import shap
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# ✅ Compute SHAP values using KernelExplainer for kNN models
shap_values_list = []

for name, model in models.items():
    explainer = shap.KernelExplainer(model.predict, shap.sample(X_train_scaled, 100))
    shap_values = explainer.shap_values(new_data_scaled)  # Compute SHAP values
    shap_values_list.append(shap_values)  # Store SHAP values for each model

# ✅ Convert list to numpy array and compute mean SHAP values
shap_values_array = np.array(shap_values_list)  # Shape: (num_models, num_samples, num_features)
mean_shap_values = np.mean(np.abs(shap_values_array), axis=0)[0]  # Compute mean absolute SHAP values

# ✅ Print original mean SHAP values
print("Mean SHAP Values:\n", mean_shap_values)

feature_names = new_data.columns

# ✅ Sort and display top features based on SHAP importance
shap_importance = sorted(zip(feature_names, mean_shap_values), key=lambda x: x[1], reverse=True)

# Create a DataFrame for SHAP importance values
shap_importance_df = pd.DataFrame(shap_importance, columns=["Feature", "SHAP Importance"])

print(shap_importance_df)

# ✅ Bar Plot (Feature Importance)
plt.figure(figsize=(8, 6))

# Define colors: Light orange for features with SHAP importance < 0.02, blue for intermediate, green for top features
colors = ['orange' if importance < 0.02 else ('skyblue' if importance < 0.05 else 'green')
          for importance in shap_importance_df["SHAP Importance"].values]

# Highlight the top 3 features in green
top_3_features = shap_importance_df.head(3)
top_3_indices = shap_importance_df.index[:3]



for idx in top_3_indices:
    colors[idx] = 'green'

# Plot the bars with customized colors
bars = plt.barh(shap_importance_df["Feature"][::-1], shap_importance_df["SHAP Importance"].values[::-1], color=colors[::-1])

# Set x-axis labels to show the SHAP values properly
plt.xlabel("SHAP Value")
plt.ylabel("Feature")
plt.title("SHAP Feature Importance")

# Format x-axis to show SHAP values properly, allowing smaller values to appear on the plot
plt.tick_params(axis='x', which='both', labelsize=10)
plt.xticks(np.arange(0, max(shap_importance_df["SHAP Importance"]), 0.05))  # Adjust step size as per the range of SHAP values

# Add legend to indicate the color scheme
import matplotlib.patches as mpatches

# Create custom legend labels
legend_labels = [
    mpatches.Patch(color='green', label='High values'),
    mpatches.Patch(color='skyblue', label='Intermediate values'),
    mpatches.Patch(color='orange', label='Low values')
]

plt.legend(handles=legend_labels, loc='upper right', bbox_to_anchor=(0.97, 0.8))

# Show the plot
plt.show()

# ✅ Extract Top 3 Features
top_3_features = shap_importance_df.head(3)

# Print the top 3 features and their SHAP values
print("\nTop 3 Features Based on SHAP Importance:")
print(top_3_features)

# ✅ Bar Plot for Top 3 SHAP Features with Reduced Bar Width
plt.figure(figsize=(6, 4))

# For top 3 features, use green bars
plt.barh(
    top_3_features["Feature"][::-1],
    top_3_features["SHAP Importance"].values[::-1],
    color='green',  # Green color for top 3
    height=0.6  # Reduce bar height to make them thinner
)

plt.xlabel("SHAP Value")
plt.ylabel("Feature")
plt.title("Top 3 SHAP Feature Importance")
plt.show()


# Class-wise explanations for each feature
feature_explanations = {
    "baseline_value": {
        "Normal": "The fetal heart rate baseline is within 110-160 bpm, indicating a well-oxygenated fetus.",
        "Suspect": "Mild deviations from normal may indicate transient factors like maternal fever or mild fetal distress.",
        "Pathological": "Baseline >160 bpm or <110 bpm suggests fetal hypoxia, infection, or neurological compromise."
    },
    "accelerations": {
        "Normal": "Presence of regular accelerations is a strong indicator of fetal well-being.",
        "Suspect": "Reduced accelerations may indicate fetal sleep cycles but should be monitored.",
        "Pathological": "Absence of accelerations suggests fetal distress or compromised autonomic regulation."
    },
    "fetal_movement": {
        "Normal": "Adequate fetal movements reflect active and responsive behavior.",
        "Suspect": "Decreased movement could be due to fetal sleep but requires observation.",
        "Pathological": "Severely reduced movements may indicate hypoxia or neurological impairment."
    },
    "uterine_contractions": {
        "Normal": "Moderate contractions are expected and support normal labor progression.",
        "Suspect": "Frequent contractions could lead to temporary oxygen reduction for the fetus.",
        "Pathological": "Excessive contractions may cause distress due to insufficient placental blood flow."
    },
    "light_decelerations": {
        "Normal": "Occasional mild decelerations are normal and often due to fetal movements.",
        "Suspect": "Frequent occurrences may suggest umbilical cord compression.",
        "Pathological": "Repeated or prolonged decelerations could indicate oxygen deprivation."
    },
    "severe_decelerations": {
        "Normal": "None or very rare occurrences indicate fetal stability.",
        "Suspect": "Some severe decelerations may occur but require further evaluation.",
        "Pathological": "Frequent, prolonged decelerations indicate serious fetal compromise."

    },
    "prolongued_decelerations": {
        "Normal": "Not observed under normal conditions.",
        "Suspect": "One or two prolonged decelerations may occur but need assessment.",
        "Pathological": "Persistent prolonged decelerations suggest fetal distress and may require immediate intervention."
    },
    "abnormal_short_term_variability": {
        "Normal": "Balanced variability in heart rate reflects a healthy autonomic system.",
        "Suspect": "Slightly reduced variability suggests fetal sleep or mild distress.",
        "Pathological": "Significantly low variability is a warning sign of fetal compromise."
    },
    "mean_value_of_short_term_variability": {
        "Normal": "Falls within an expected range, showing good reactivity.",
        "Suspect": "Mildly reduced variability requires monitoring.",
        "Pathological": "Extremely low values suggest fetal distress or central nervous system dysfunction."
    },
    "percentage_of_time_with_abnormal_long_term_variability": {
        "Normal": "Minimal abnormal variability is expected in a healthy fetus.",
        "Suspect": "Increased percentage suggests irregular fetal response to stimuli.",
        "Pathological": "High percentages indicate instability in fetal heart rate control."
    },
    "mean_value_of_long_term_variability": {
       "Normal": "Expected fluctuations show a healthy nervous system.",
       "Suspect": "Slightly abnormal values suggest minor fetal stress.",
       "Pathological": "Severely reduced variability signals fetal distress."
    },
    "histogram_width": {
        "Normal": "A well-distributed heart rate pattern is present.",
        "Suspect": "A narrow or excessively broad range may suggest altered heart rate control.",
        "Pathological": "Extreme values indicate severe fetal distress or arrhythmia."

    },
    "histogram_min": {
        "Normal": "Lowest recorded FHR is within the safe range.",
        "Suspect": "Slightly lower values may require observation.",
        "Pathological": "Very low values may indicate fetal bradycardia and distress."
    },
    "histogram_max": {
        "Normal": "Highest recorded FHR is within the normal range.",
        "Suspect": "Slight elevations may indicate temporary stress.",
        "Pathological": "Extremely high values (>180 bpm) suggest fetal tachycardia, requiring intervention."

    },
    "histogram_number_of_peaks": {
        "Normal": "Indicates healthy heart rate variation.",
        "Suspect": "Fewer peaks may suggest a lack of variability.",
        "Pathological": "A flat histogram indicates fetal distress."

    },
    "histogram_number_of_zeroes": {
        "Normal": "Few or no zeroes are expected.",
        "Suspect": "Increased zeroes may suggest erratic heart rate.",
        "Pathological": "High zero counts could indicate recording errors or cardiac arrest."
    },
    "histogram_mode": {
        "Normal": "Most frequent heart rate value is in the healthy range.",
        "Suspect": "Shifts in mode suggest altered heart rate regulation.",
        "Pathological": "Mode outside normal FHR range indicates fetal compromise."
    },
    "histogram_mean": {
       "Normal": "Mean value reflects stable heart rate distribution.",
       "Suspect": "Slight shifts may suggest transient distress.",
       "Pathological": "Significant deviation indicates irregular heart rate regulation."
    },
    "histogram_median": {
        "Normal": "Median is close to the mean, suggesting a normal heart rate pattern.",
        "Suspect": "Differences between median and mean may indicate irregularities.",
        "Pathological": "A large gap suggests asymmetric fetal heart rate patterns, possibly due to distress."

    },
    "histogram_variance": {
        "Normal": "Indicates a balanced variation in heart rate.",
        "Suspect": "Increased variance may suggest an unstable heart rate pattern.",
        "Pathological": "Extremely high or low variance signals potential fetal distress."

    },
    "histogram_tendency": {
        "Normal": "Stable heart rate tendency with mild fluctuations.",
        "Suspect": "Increasing or decreasing tendency may indicate temporary stress.",
        "Pathological": "A strong tendency towards bradycardia or tachycardia is concerning."
    }
}

# ✅ Map predicted class index to its label
class_labels = {0: "Normal", 1: "Suspect", 2: "Pathological"}
predicted_class = class_labels[ensemble_predictions[0]]  # Ensure correct indexing

# ✅ Generate explanation text
print("\n📝 Explanation Behind the Prediction:\n")

explanation_text = []
for row in top_3_features.itertuples(index=False):  # Avoid including the index
    feature, value = row  # Unpack correctly
    impact_direction = "increasing" if value > 0 else "decreasing"
    explanation = feature_explanations.get(feature, {}).get(predicted_class, "No explanation available.")

    explanation_text.append(f"🔹 Feature '{feature}' has a SHAP value of {value:.4f}, {impact_direction} the probability of {predicted_class}.\n   ➡️ {explanation}")


# ✅ Print explanations for top 3 features
for explanation in explanation_text:
    print(explanation)

# ✅ Overall Explanation
print("\n🔍 Final Interpretation:")
print(f"Fetal Health Condition is **{predicted_class}**.")
print(f"This decision was mostly influenced by **{top_3_features.iloc[0, 0]}**, **{top_3_features.iloc[1, 0]}**, and **{top_3_features.iloc[2, 0]}**.")

import pickle

# Save the trained model to a file
with open('fetal_ensemble_model.pkl', 'wb') as model_file:
    pickle.dump(ensemble_model, model_file)

print("Model saved successfully!")

with open("fetal_scaler.pkl", "wb") as scaler_file:
    pickle.dump(scaler, scaler_file)

import pickle
with open("fffetal_shap_explainer.pkl", "wb") as shap_file:
    pickle.dump(explainer, shap_file)



